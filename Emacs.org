#+TITLE: Emacs Environment Configuration
#+SUBTITLE: One Of These Days, I'll Be Productive In Emacs
#+AUTHOR: Demis Balbach
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o444)

This file includes the complete configuration for my Emacs setup. Although I have started an emacs config from scratch when I first got into emacs, I soon realized that there are great [[https://github.com/caisah/emacs.dz][pre-built configurations]] out there that save you a lot of time and head-scratching when delving into the rabbit hole that is Emacs.
However, pre-built configurations themselves can be a rabbit hole as the linked table hopefully shows. Personally, I settled with [[https://github.com/hlissner/doom-emacs][DOOM Emacs]] - it's a popular configuration and for good reason. I can't imagine going back to anything else at this point (This is a good thing?).

I like to have *one* file to configure Emacs. Hence why you  are reading a [[https://leanpub.com/lit-config/read][literate]] configuration. Not only documents it my configuration, it /is/ my configuration. It will tangle all of my configuration- or dotfiles on every save.

* Table Of Contents :TOC_3:
- [[#exported-files][Exported Files]]
- [[#doom-emacs][DOOM Emacs]]
  - [[#modules][Modules]]
  - [[#completion][Completion]]
  - [[#user-interface][User Interface]]
  - [[#editor][Editor]]
  - [[#emacs][Emacs]]
  - [[#terminal][Terminal]]
  - [[#checkers][Checkers]]
  - [[#tools][Tools]]
  - [[#languages][Languages]]
  - [[#email][Email]]
  - [[#applications][Applications]]
- [[#basic-settings][Basic Settings]]
  - [[#key-bindings][Key bindings]]
    - [[#conventions][Conventions]]
    - [[#common][Common]]
    - [[#files][Files]]
    - [[#buffer][Buffer]]
    - [[#help][Help]]
    - [[#code][Code]]
    - [[#workspaces][Workspaces]]
    - [[#terminals][Terminals]]
  - [[#editor-1][Editor]]
    - [[#deleting-whitespace][Deleting whitespace]]
    - [[#writing-environment][Writing environment]]
  - [[#default-applications][Default Applications]]
  - [[#user-interface-1][User Interface]]
  - [[#window-management][Window Management]]
  - [[#completion-system][Completion System]]
- [[#applications-1][Applications]]
  - [[#app-launcher][App launcher]]
  - [[#irc][IRC]]
  - [[#pass][Pass]]
  - [[#pinentry][Pinentry]]
- [[#development-environment][Development Environment]]
  - [[#generic-settings][Generic settings]]
    - [[#lsp-ui][=lsp-ui=]]
    - [[#lsp-treemacs][=lsp-treemacs=]]
  - [[#languages-1][Languages]]
    - [[#nodejsts][Node/JS/TS]]
    - [[#php][PHP]]
    - [[#org][ORG]]

* Exported Files

Tangling this file will create various directories and files in the home directory. However, I don't specify the target file for every source block individually, I rather declare file-local variables containing the target directories (I like [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]]). Because I follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG]] directory specification, I'll use the preferred defaults.
I set all local variables in the [[#Local Variables][Local Variables]] footer of this file (View the raw file in order to see it).

The following tables shows all the defined target directories. All exports are based on these. This table is auto-generated.

#+name: filelist
#+begin_src emacs-lisp :results value :exports results :tangle no
(append
 `(("Variable" "Path") hline)
 (cl-loop for (e) on file-paths collect
          (list (car e)
                (concat "=" (prin1-to-string (cdr e) t) "="))))
#+end_src

#+RESULTS: filelist
| Variable           | Path                              |
|--------------------+-----------------------------------|
| bindir             | =/home/db/.local/share/bin=       |
| guix-manifest-home | =/home/db/.config/guix/manifests= |
| guix-config-home   | =/home/db/.config/guix=           |
| doomdir            | =/home/db/.config/doom=           |
| npm-config-home    | =/home/db/.config/npm=            |
| profiled-home      | =/home/db/.config/profile.d=      |
| xdg-data-home      | =/home/db/.local/share=           |
| xdg-config-home    | =/home/db/.config=                |

I may refer to these directories throughout the configuration, e.g. like that: =doomdir/config.el=.

* TODO Current problems :noexport:

This is a simple list containing general problems / TODOs that I'll tackle in future commits.

- key bindings via =general=
- org-mode navigation key bindings
- truncate in help buffers
- =move-text=
- Add Marginalia/Vertico to theme
- configure vterm popup rules
- Sway layouts?

* DOOM Emacs

DOOM expects three files to be present: =doomdir/init.el= for its active modules, =doomdir/config.el= as a main configuration and =doomdir/packages.el= for package declarations.
Well, what is org-mode good for if not tangling files? Just kidding. Generally speaking, the source blocks of this file will be tangled to =config.el= while I'll tangle bits and pieces to =init.el= and =packages.el= where needed. I also create =guix-manifest-home/emacs.scm= for external packages (binaries, fonts, ...) I need.

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/emacs.scm") :noweb yes :mkdir yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Emacs.org

(specifications->manifest
 '(
   "emacs-pgtk-native-comp"
   <<external-packages>>
   ))
#+end_src

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/development.scm") :noweb yes :mkdir yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Emacs.org

(specifications->manifest
 '(
   <<dev-packages>>
   ))
#+end_src

#+begin_src emacs-lisp :tangle (concat (cdr (assoc 'doomdir file-paths)) "/packages.el") :noweb yes :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
;;; This file is auto-generated. Do not make changes manually.
;;; Exported from Emacs.org

<<packages>>
#+end_src

#+begin_src emacs-lisp :tangle (concat (cdr (assoc 'doomdir file-paths)) "/config.el") :noweb yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;; This file is auto-generated. Do not make changes manually.
;;; Exported from Emacs.org

<<config>>
#+end_src

** Modules

First, let's define the modules doom should use. These go into =doomdir/init.el=. Note that you can also declare your own modules, there's a [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#writing-your-own-modules][section]] about it in the documentation. Please note that this list is shortened, I excluded module sections I will never use.

#+begin_src emacs-lisp :tangle (concat (cdr (assoc 'doomdir file-paths)) "/init.el") :noweb yes
;;; init.el -*- lexical-binding: t; -*-
;; This file is auto-generated. Do not make changes manually.
;; Exported from Emacs.org

(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       (default +smartparens))
#+end_src

** Completion

#+begin_src emacs-lisp :noweb-ref doom-completion
:completion
;company                ; the ultimate code completion backend
;;helm                  ; the *other* search engine for love and life
;;ido                   ; the other *other* search engine...
;;ivy                   ; a search engine for love and life
(vertico +icons)        ; the search engine of the future
#+end_src

** User Interface

#+begin_src emacs-lisp :noweb-ref doom-ui
(emoji +unicode
       +ascii
       +github)         ; ðŸ™‚
;;deft                  ; notational velocity for Emacs
;;doom-quit             ; DOOM quit-message prompts when you quit Emacs
;;fill-column           ; a `fill-column' indicator
;;hydra
;;indent-guides         ; highlighted indent columns
;;ligatures             ; ligatures and symbols to make your code pretty again
;;minimap               ; show a map of the code on the side
;;nav-flash             ; blink cursor line after big motions
;;neotree               ; a project drawer, like NERDTree for vim
;;tabs                  ; a tab bar for Emacs
;;treemacs              ; a project drawer, like neotree but cooler
;;unicode               ; extended unicode support for various languages
;;vc-gutter             ; vcs diff in the fringe
;;vi-tilde-fringe       ; fringe tildes to mark beyond EOB
;;window-select         ; visually switch windows
doom                    ; what makes DOOM look the way it does
doom-dashboard          ; a nifty splash screen for Emacs
hl-todo                 ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
modeline                ; snazzy, Atom-inspired modeline, plus API
ophints                 ; highlight the region an operation acts on
popup                   ; tame sudden yet inevitable temporary windows
workspaces              ; tab emulation, persistence & separate workspaces
zen                   ; distraction-free coding or writing
#+end_src

** Editor

#+begin_src emacs-lisp :noweb-ref doom-editor
(evil +everywhere)      ; come to the dark side, we have cookies
;;(format +onsave)      ; automated prettiness
;;fold                  ; (nigh) universal code folding
;;god                   ; run Emacs commands without modifier keys
;;lispy                 ; vim for lisp, for people who don't like vim
;;multiple-cursors      ; editing in many places at once
;;objed                 ; text object editing for the innocent
;;parinfer              ; turn lisp into python, sort of
;;rotate-text           ; cycle region at point between text candidates
;;word-wrap             ; soft wrapping with language-aware indent
file-templates          ; auto-snippets for empty files
snippets                ; my elves. They type so I don't have to
#+end_src

** Emacs

#+begin_src emacs-lisp :noweb-ref doom-emacs
;;ibuffer               ; interactive buffer management
dired                   ; making dired pretty [functional]
electric                ; smarter, keyword-based electric-indent
undo                    ; persistent, smarter undo for your inevitable mistakes
vc                      ; version-control and Emacs, sitting in a tree
#+end_src

** Terminal

#+begin_src emacs-lisp :noweb-ref doom-term
;;shell                 ; simple shell REPL for Emacs
;;term                  ; basic terminal emulator for Emacs
eshell                  ; the elisp shell that works everywhere
vterm                   ; the best terminal emulation in Emacs
#+end_src

I need the =libvterm= dependency in order to build =vterm=.

#+begin_src scheme :noweb-ref dev-packages
"libvterm"
"cmake"
"make"
"gcc"
#+end_src

** Checkers

#+begin_src emacs-lisp :noweb-ref doom-checkers
(spell +flyspell)       ; tasing you for misspelling mispelling
(syntax +childframe)    ; tasing you for every semicolon you forget
grammar                 ; tasing grammar mistake every you make
#+end_src

=flyspell= requires =ispell=. Let's install it.

#+begin_src emacs-lisp :tangle no :noweb-ref external-packages
"ispell"
#+end_src

** Tools

#+begin_src emacs-lisp :noweb-ref doom-tools
(eval +overlay)         ; run code, run (also, repls)
(lsp
 +peek
 :completion vertico)
;;ansible
;;debugger              ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig          ; let someone else argue about tabs vs spaces
;;ein                   ; tame Jupyter notebooks with emacs
;;gist                  ; interacting with github gists
;;make                  ; run make tasks from Emacs
;;pdf                   ; pdf enhancements
;;prodigy               ; FIXME managing external services & code builders
;;rgb                   ; creating color strings
;;taskrunner            ; taskrunner for all your projects
;;terraform             ; infrastructure as code
;;tmux                  ; an API for interacting with tmux
;;upload                ; map local to remote projects via ssh/ftp
lookup                  ; navigate your code and its documentation
magit                   ; a git porcelain for Emacs
pass                    ; password manager for nerds
#+end_src

** Languages

#+begin_src emacs-lisp :noweb-ref doom-lang
(javascript
 +lsp
 :completion vertico)
;;(dart +flutter)       ; paint ui and not much else
;;(go +lsp)             ; the hipster dialect
;;(haskell +dante)      ; a language that's lazier than I am
;;(java +meghanada)     ; the poster child for carpal tunnel syndrome
;;(ruby +rails)         ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;(scheme +guile)       ; a fully conniving family of lisps
;;agda                  ; types of types of types of types...
;;beancount             ; mind the GAAP
;;cc                    ; C > C++ == 1
;;clojure               ; java with a lisp
;;common-lisp           ; if you've seen one lisp, you've seen them all
;;coq                   ; proofs-as-programs
;;crystal               ; ruby at the speed of c
;;csharp                ; unity, .NET, and mono shenanigans
;;data                  ; config/data formats
;;elixir                ; erlang done right
;;elm                   ; care for a cup of TEA?
;;erlang                ; an elegant language for a more civilized age
;;ess                   ; emacs speaks statistics
;;factor
;;faust                 ; dsp, but you get to keep your soul
;;fsharp                ; ML stands for Microsoft's Language
;;fstar                 ; (dependent) types and (monadic) effects and Z3
;;gdscript              ; the language you waited for
;;hy                    ; readability of scheme w/ speed of python
;;idris                 ; a language you can depend on
;;json                  ; At least it ain't XML
;;julia                 ; a better, faster MATLAB
;;kotlin                ; a better, slicker Java(Script)
;;latex                 ; writing papers in Emacs has never been so fun
;;lean                  ; for folks with too much to prove
;;ledger                ; be audit you can be
;;lua                   ; one-based indices? one-based indices
;;markdown              ; writing docs for people to ignore
;;nim                   ; python + lisp at the speed of c
;;nix                   ; I hereby declare "nix geht mehr!"
;;ocaml                 ; an objective camel
;;php                   ; perl's insecure younger brother
;;plantuml              ; diagrams for confusing people more
;;purescript            ; javascript, but functional
;;python                ; beautiful is better than ugly
;;qt                    ; the 'cutest' gui framework ever
;;racket                ; a DSL for DSLs
;;raku                  ; the artist formerly known as perl6
;;rest                  ; Emacs as a REST client
;;rst                   ; ReST in peace
;;rust                  ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala                 ; java, but good
;;sml
;;solidity              ; do you need a blockchain? No.
;;swift                 ; who asked for emoji variables?
;;terra                 ; Earth and Moon in alignment for performance.
;;yaml                  ; JSON, but readable
;;zig                   ; C, but simpler
emacs-lisp              ; drown in parentheses
org                     ; organize your plain life in plain text
sh                      ; she sells {ba,z,fi}sh shells on the C xor
web                     ; the tubes
#+end_src

** Email

#+begin_src emacs-lisp :noweb-ref doom-email
;;(mu4e +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

** Applications

#+begin_src emacs-lisp :noweb-ref doom-app
;;(rss +org)            ; emacs as an RSS reader
;;calendar
;;emms
;;everywhere            ; *leave* Emacs!? You must be joking
;;twitter               ; twitter client https://twitter.com/vnought
irc                     ; how neckbeards socialize
#+end_src

* Basic Settings

This chapter covers the essential configuration. While I do enjoy GNU/Guix, I currently don't use it to manage my emacs packages. The reason for this is that DOOM comes with its own package manager built on top of [[https://github.com/raxod502/straight.el][straight.el]], which is (in my opinion) superior to Guix.
DOOM comes with a the =use-package!= macro, which is a thin wrapper around =straight-use-package=. This is used to install packages into =doomdir/packages.el=.

Set global user information.

#+begin_src emacs-lisp :noweb-ref config
(setq user-full-name "Demis Balbach"
      user-nick-name "minikN"
      user-mail-address "db@minikn.xyz")
#+end_src

Lets make some default directories available to Emacs.

#+begin_src emacs-lisp :noweb-ref config
(setq db/git-dir (or (getenv "GITDIR") "~/.local/share/git")
      db/bin-dir (or (getenv "BINDIR") "~/.local/share/bin")
      db/literate-config-dir (concat db/git-dir "/guix/")
      xdg-config-home (or (getenv "XDG_CONFIG_HOME") "~/.config")
      xdg-data-home (or (getenv "XDG_DATA_HOME") "~/.local/share"))
#+end_src

It can be beneficial to gather some information about the environment we're running on. Sway is a bit picky here. In order to get the current keyboard layout, I need a JSON processor called =jq=, luckily, Guix has it.

#+begin_src scheme :noweb-ref external-packages
"jq"
#+end_src

#+begin_src emacs-lisp :noweb-ref config
(defconst IS-WSL (numberp (string-match "-[Mm]icrosoft" operating-system-release)))
(defconst IS-WAYLAND (stringp (getenv "WAYLAND_DISPLAY")))

(setq db/keyboard-layout (shell-command-to-string
                          (if IS-WAYLAND
                              "swaymsg -t get_inputs | jq 'map(select(has(\"xkb_active_layout_name\")))[0].xkb_active_layout_name'"
                            "printf %s \"$(setxkbmap -print | awk -F\"+\" '/xkb_symbols/ {print $2}')\"")))

(defconst IS-GERMAN-LAYOUT (numberp (or (string-match "de" db/keyboard-layout)
                                        (string-match "German" db/keyboard-layout))))

(defconst IS-ENGLISH-LAYOUT (numberp (or (string-match "en" db/keyboard-layout)
                                         (string-match "English" db/keyboard-layout))))
#+end_src

#+begin_src conf :tangle no :noweb-ref external-packages
"setxkbmap"
#+end_src

** Key bindings

This section will only cover global, or mode-independent key bindings. All mode-specific bindings will be declared in their respective package configuration.

I would like to use =C-SPC= as my leader and =C-SPC C-SPC= as my local leader in both normal and insert state. To do that, I first need to unbind =C-SPC= completely. Fortunately, DOOM provides the handy =map!= macro.

#+begin_src emacs-lisp :noweb-ref config
(map! "C-SPC" nil)

(setq doom-leader-key "C-SPC"
      doom-leader-alt-key "C-SPC"
      doom-localleader-key "C-SPC C-SPC"
      doom-localleader-alt-key "C-SPC C-SPC")
#+end_src

DOOM comes with a handful of predefined key bindings. However, I decided to deactivate them completely. I do so by removing the =+keybindings= flag from the its config module. Instead of using them, I define my own set of bindings that I really need and want.

That being said, I copy a lot of the DOOM bindings, so why not simply keep the original bindings and override the ones I want? I don't do that because that way, the bindings that I don't override would still be present, which would not decrease the total amount of key bindings available (in lets say =which-key=). I want to start from a clean state and only add what I want.

*** Conventions

My key bindings revolve around =C-SPC= being my leader. Mode-specific bindings can be accessed with =C-SPC C-SPC=. In practice, this means I only have to tap =SPC= twice to access them. The ctrl key is pretty bad positioned in terms of ergonomics. To remedy that, I swapped it with capslock. It takes some time getting used to, but it's worth it!

I like the concept of having keys prefixing certain key maps (=f= for files, =b= for buffers, ...). In addition to that, I assign the most used function to =C-<prefix>=. For files that would be =find-file=. By binding it to =C-f= I can quickly access it by pressing =C-SPC C-f=, if I need more file-related functions I can always access its key map with =C-SPC f=.

In summary:

- swap capslock with ctrl
- =C-SPC= as leader, =C-SPC C-SPC= as local leader
- prefix-keys for certain key maps
- most used function for every key map bound to =C-<prefix>=

*** Common

#+begin_src emacs-lisp :noweb-ref config
(map! :leader
      :desc "Eval expression"                           "."       #'eval-expression

      (:when (featurep! :tools pass)
       :desc "Open password store"                      "s"       #'pass
       (:when (featurep! :completion vertico)
        :desc "Get password"                            "C-s"     #'+pass/consult))

      (:when IS-GERMAN-LAYOUT
       :desc "Toggle last buffer"                       "#"       #'evil-switch-to-windows-last-buffer
       :desc "Search project"                           "-"       #'+default/search-project
       :desc "Search symbol in project"                 "_"       #'+default/search-project-for-symbol-at-point)

      (:when IS-ENGLISH-LAYOUT
       :desc "Toggle last buffer"                       "'"       #'evil-switch-to-windows-last-buffer
       :desc "Search project"                           "/"       #'+default/search-project
       :desc "Search symbol in project"                 "?"       #'+default/search-project-for-symbol-at-point))

(map! (:after help      :map help-mode-map :n           "o"       #'link-hint-open-link)
      (:after helpful   :map helpful-mode-map :n        "o"       #'link-hint-open-link)
      (:after info      :map Info-mode-map :n           "o"       #'link-hint-open-link)
      (:after apropos   :map apropos-mode-map :n        "o"       #'link-hint-open-link
       :n                                               "TAB"     #'forward-button
       :n                                               [tab]     #'forward-button
       :n                                               [backtab] #'backward-button)
      (:after view      :map view-mode-map              [escape]  #'View-quit-all)
      (:after man       :map Man-mode-map :n            "q"       #'kill-current-buffer)
      (:after geiser-doc :map geiser-doc-mode-map :n    "o"       #'link-hint-open-link)
      (:after (evil-org evil-easymotion)
                        :map evil-org-mode-map :m       "gsh"     #'+org/goto-visible)

      (:when (featurep! :editor multiple-cursors)
       :prefix "gz"
       :nv                                              "d"       #'evil-mc-make-and-goto-next-match
       :nv                                              "D"       #'evil-mc-make-and-goto-prev-match
       :nv                                              "j"       #'evil-mc-make-cursor-move-next-line
       :nv                                              "k"       #'evil-mc-make-cursor-move-prev-line
       :nv                                              "m"       #'evil-mc-make-all-cursors
       :nv                                              "n"       #'evil-mc-make-and-goto-next-cursor
       :nv                                              "N"       #'evil-mc-make-and-goto-last-cursor
       :nv                                              "p"       #'evil-mc-make-and-goto-prev-cursor
       :nv                                              "P"       #'evil-mc-make-and-goto-first-cursor
       :nv                                              "q"       #'evil-mc-undo-all-cursors
       :nv                                              "t"       #'+multiple-cursors/evil-mc-toggle-cursors
       :nv                                              "u"       #'+multiple-cursors/evil-mc-undo-cursor
       :nv                                              "z"       #'+multiple-cursors/evil-mc-toggle-cursor-here
       :v                                               "I"       #'evil-mc-make-cursor-in-visual-selection-beg
       :v                                               "A"       #'evil-mc-make-cursor-in-visual-selection-end)

      ;; misc
      :n                                                "C-S-f"   #'toggle-frame-fullscreen
      :n                                                "C-+"    #'doom/reset-font-size
      ;; Buffer-local font resizing
      :n                                                "C-="    #'text-scale-increase
      :n                                                "C--"    #'text-scale-decrease
      ;; Frame-local font resizing
      :n                                                "M-C-="  #'doom/increase-font-size
      :n                                                "M-C--"  #'doom/decrease-font-size

      :i [tab] (cmds! (and (featurep! :editor snippets)
                           (yas-maybe-expand-abbrev-key-filter 'yas-expand))
                      #'yas-expand
                      (and (bound-and-true-p company-mode)
                           (featurep! :completion company +tng))
                      #'company-indent-or-complete-common)
      :m [tab] (cmds! (and (featurep! :editor snippets)
                           (evil-visual-state-p)
                           (or (eq evil-visual-selection 'line)
                               (not (memq (char-after) (list ?\( ?\[ ?\{ ?\} ?\] ?\))))))
                      #'yas-insert-snippet
                      (and (featurep! :editor fold)
                           (save-excursion (end-of-line) (invisible-p (point))))
                      #'+fold/toggle
                      ;; Fixes #4548: without this, this tab keybind overrides
                      ;; mode-local ones for modes that don't have an evil
                      ;; keybinding scheme or users who don't have :editor (evil
                      ;; +everywhere) enabled.
                      (or (doom-lookup-key
                           [tab]
                           (list (evil-get-auxiliary-keymap (current-local-map) evil-state)
                                 (current-local-map)))
                          (doom-lookup-key
                           (kbd "TAB")
                           (list (evil-get-auxiliary-keymap (current-local-map) evil-state)))
                          (doom-lookup-key (kbd "TAB") (list (current-local-map))))
                      it
                      (fboundp 'evil-jump-item)
                      #'evil-jump-item))
#+end_src

*** Files

#+begin_src emacs-lisp :noweb-ref config
(map! :leader
      :desc "Find file"                         "C-f"   #'find-file
      :prefix ("f" . "File")
      :desc "Copy this file"                    "c"     #'doom/copy-this-file
      :desc "Delete this file"                  "d"     #'doom/delete-this-file
      :desc "Open directory"                    "D"     #'+default/dired
      :desc "Find file in emacs.d"              "e"     #'doom/find-file-in-emacsd
      :desc "Find file"                         "f"     #'find-file
      :desc "Locate file"                       "l"     #'locate
      :desc "Open literate config"              "p"     (cmd! (doom-project-browse db/literate-config-dir))
      :desc "Rename/move file"                  "r"     #'doom/move-this-file
      :desc "Save file"                         "s"     #'save-buffer
      :desc "Save file as..."                   "S"     #'write-file
      :desc "Sudo find file"                    "u"     #'doom/sudo-find-file
      :desc "Sudo this file"                    "U"     #'doom/sudo-this-file
      :desc "Yank file path"                    "y"     #'+default/yank-buffer-path
      :desc "Yank file path from project"       "Y"     #'+default/yank-buffer-path-relative-to-project)
#+end_src

*** Buffer

#+begin_src emacs-lisp :noweb-ref config
(map!                                           "C-M-j" #'persp-switch-to-buffer
      (:when (featurep! :completion vertico)
       (:after vertico :map vertico-map         "M-RET" #'vertico-exit-input
                                                "C-SPC" #'+vertico/embark-preview
                                                "C-j"   #'vertico-next
                                                "C-S-j" #'vertico-next-group
                                                "C-k"   #'vertico-previous
                                                "C-S-k" #'vertico-previous-group)
       (:map minibuffer-local-map               "C-e"   #'embark-act))

      :leader
      :desc "Switch to buffer"                  "C-b"   #'switch-to-buffer
      :prefix ("b" . "Buffer")
      :desc "Kill buffer"                       "k"     #'kill-current-buffer
      :desc "Kill all buffers"                  "K"     #'doom/kill-all-buffers
      :desc "Set bookmark"                      "m"     #'bookmark-set
      :desc "Delete bookmark"                   "M"     #'bookmark-delete
      :desc "Kill other buffers"                "O"     #'doom/kill-other-buffers
      :desc "Revert buffer"                     "r"     #'revert-buffer
      :desc "Save buffer"                       "s"     #'basic-save-buffer
      :desc "Save all buffers"                  "S"     #'evil-write-all
      :desc "Save buffer as root"               "u"     #'doom/sudo-save-buffer
      :desc "Pop up scratch buffer"             "x"     #'doom/open-scratch-buffer
      :desc "Switch to scratch buffer"          "X"     #'doom/switch-to-scratch-buffer
      :desc "Bury buffer"                       "z"     #'bury-buffer
      :desc "Kill buried buffers"               "Z"     #'doom/kill-buried-buffers)
#+end_src

*** Help

#+begin_src emacs-lisp :noweb-ref config
(map! :leader
      :prefix ("h" . "Help")
      :desc "Emacs manual"                      "RET"    #'info-emacs-manual
      :desc "Apropos"                           "a"      #'apropos
      :desc "Apropos manual"                    "A"      #'apropos-documentation
      :desc "Bindings"                          "b"      #'describe-bindings
      :desc "Emacs version"                     "v"      #'version
      :desc "Describe key"                      "K"      #'describe-key
      :desc "Describe key briefly"              "k"      #'describe-key-briefly
      :desc "Describe keymap"                   "C-k"    #'describe-keymap
      :desc "Describe function"                 "f"      #'describe-function
      :desc "Describe variable"                 "v"      #'describe-variable
      :desc "Describe face"                     "F"      #'describe-face
      :desc "Describe font"                     "o"      #'describe-font
      :desc "Describe mode"                     "m"      #'describe-mode
      :desc "Describe minor mode"               "M"      #'doom/describe-active-minor-mode
      :desc "Describe theme"                    "t"      #'describe-theme
      :desc "Describe symbol"                   "s"      #'describe-symbol
      :desc "Describe syntax"                   "S"      #'describe-syntax

      :prefix ("hd" . "DOOM")
      :desc "Report bug"                        "b"      #'doom/report-bug
      :desc "Debug mode"                        "d"      #'doom-debug-mode
      :desc "FAQ"                               "f"      #'doom/help-faq
      :desc "Help"                              "h"      #'doom/help
      :desc "Search load path"                  "l"      #'doom/help-search-load-path
      :desc "Search loaded files"               "L"      #'doom/help-search-loaded-files
      :desc "Modules"                           "m"      #'doom/help-modules
      :desc "Package Configuration"             "c"      #'doom/help-package-config
      :desc "Custom Variables"                  "C"      #'doom/help-custom-variable
      :desc "Visit package homepage"            "P"      #'doom/help-package-homepage
      :desc "Packages"                          "p"      #'doom/help-packages
      :desc "Search headings"                   "S"      #'doom/help-search-headings
      :desc "Search"                            "s"      #'doom/help-search
      :desc "Toggle profiler"                   "t"      #'doom/toggle-profiler
      :desc "Autodefinitions"                   "u"      #'doom/help-autodefs
      :desc "Version"                           "v"      #'doom/version
      :desc "Sandbox"                           "x"      #'doom/sandbox

      :prefix ("hr" . "Reload")
      :desc "All"                               "r"      #'doom/reload
      :desc "Theme"                             "t"      #'doom/reload-theme
      :desc "Packages"                          "p"      #'doom/reload-packages
      :desc "Font"                              "f"      #'doom/reload-font
      :desc "Environtment"                      "e"      #'doom/reload-env)
#+end_src

*** Code

#+begin_src emacs-lisp :noweb-ref config
(map! (:after lsp-mode :map lsp-mode-map        "<M-return>" #'lsp-execute-code-action)
      :leader
      :prefix ("c" . "Code")
      :desc "Show documentation"                "K"   #'lsp-ui-doc-show
      :desc "Toggle Symbols"                    "S"   #'db/lsp-treemacs-symbols-toggle)
#+end_src

*** Workspaces

#+begin_src emacs-lisp :noweb-ref config
(map! (:when (featurep! :ui workspaces)
       :n "C-t"                                 #'+workspace/new
       :n "C-S-t"                               #'+workspace/display
       :g "M-1"                                 #'+workspace/switch-to-0
       :g "M-2"                                 #'+workspace/switch-to-1
       :g "M-3"                                 #'+workspace/switch-to-2
       :g "M-4"                                 #'+workspace/switch-to-3
       :g "M-5"                                 #'+workspace/switch-to-4
       :g "M-6"                                 #'+workspace/switch-to-5
       :g "M-7"                                 #'+workspace/switch-to-6
       :g "M-8"                                 #'+workspace/switch-to-7
       :g "M-9"                                 #'+workspace/switch-to-8
       :g "M-0"                                 #'+workspace/switch-to-final
       :g "M-<tab>"                             #'+workspace/cycle

       :leader
       (:prefix-map ("TAB" . "workspace")
        :desc "Display tab bar"           "TAB" #'+workspace/display
        :desc "Switch workspace"          "."   #'+workspace/switch-to
        :desc "Switch to last workspace"  "`"   #'+workspace/other
        :desc "New workspace"             "n"   #'+workspace/new
        :desc "New named workspace"       "N"   #'+workspace/new-named
        :desc "Load workspace from file"  "l"   #'+workspace/load
        :desc "Save workspace to file"    "s"   #'+workspace/save
        :desc "Delete session"            "x"   #'+workspace/kill-session
        :desc "Delete this workspace"     "d"   #'+workspace/delete
        :desc "Rename workspace"          "r"   #'+workspace/rename
        :desc "Restore last session"      "R"   #'+workspace/restore-last-session
        :desc "Next workspace"            "]"   #'+workspace/switch-right
        :desc "Previous workspace"        "["   #'+workspace/switch-left
        :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
        :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
        :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
        :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
        :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
        :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
        :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
        :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
        :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
        :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final)))
#+end_src

*** Terminals

#+begin_src emacs-lisp :noweb-ref config
(map! :leader
      (:when (featurep! :term vterm)
       :desc "Open terminal"                    "C-t"   #'+vterm/here
       :prefix ("t" . "Terminals")
       :desc "Open vterm"                       "v"     #'+vterm/here
       :desc "Popup vterm"                      "V"     #'+vterm/toggle)
      (:unless (featurep! :term vterm)
       :desc "Open terminal"                    "C-t"   #'ansi-term)

      :prefix ("t" . "Terminals")
      :desc "Open ansi-term"                    "a"     #'ansi-term
      :desc "Open scratch buffer"               "x"     #'doom/switch-scratch-buffer
      :desc "Popup scratch buffer"              "X"     #'doom/open-scratch-buffer
      :desc "Open eshell buffer"                "e"     #'+eshell/here
      :desc "Popup eshell buffer"               "E"     #'+eshell/toggle
      :desc "Open full eshell buffer"           "f"     #'+eshell/frame)
#+end_src

** Editor

Some sensible defaults for working with emacs.

#+begin_src emacs-lisp :noweb-ref config
(setq-default
 line-spacing 0.2                               ; Increase the line-spacing a bit
 undo-limit (* 8 1024 1024)                     ; Set the undo history limit to 80 MB
 gc-cons-threshold (* 8 1024 1024)              ; Threshold for garbage collection (80 MB)
 read-process-output-max (* 1024 1024)          ; Threshold for process output (10 MB)
 evil-want-fine-undo t                          ; Be more granular with undo in insert mode
 global-auto-revert-none-file-buffers t         ; Automatically revert non-file buffers
 auto-save-default t                            ; auto-save is a nice feature
 backup-directory-alist                         ; But I don't like emacs littering my file system
 `((".*" . ,temporary-file-directory))          ; with auto-save and backup files.
 auto-save-file-name-transforms                 ; Therefore, move them to /tmp/.
 `((".*" ,temporary-file-directory t))
 delete-by-moving-to-trash t                    ; Delete by moving to trash
 indent-tabs-mode nil                           ; No tabs for indentation
 tab-with 4                                     ; 4 spaces = 1 tab
 scroll-margin 2                                ; Margin when scrolling vertically
 enable-local-variables t                       ; Automaticall enable safe local variables
 select-enable-clipboard t                      ; Merge emacs' and system' clipboard.
 completion-cycle-threshold 3                   ; TAB cycle if there are only few candidates
 read-extended-command-predicate                ; Emacs 28: Hide commands in M-x which do not work in the current mode.
 #'command-completion-default-include-p)        ; Corfu commands are hidden, since they are not supposed to be used via M-x.

(global-auto-revert-mode 1)                     ; Automatically revert file buffers
(global-subword-mode 1)                         ; Iterate through camelCase
(set-default-coding-systems 'utf-8)             ; Default utf-8 encoding
#+end_src

*** Deleting whitespace

I use [[https://github.com/nflath/hungry-delete][hungry-delete]] to delete up/back to the next non-whitespace character. However, I don't want to use this globally, I only bind it to =M-<backspace>= and =M-<delete>=

#+begin_src emacs-lisp :noweb-ref config
(use-package! hungry-delete
  :bind (("M-<backspace>" . hungry-delete-backward)
         ("M-<delete>" . hungry-delete-forward)))
#+end_src

#+begin_src emacs-lisp :noweb-ref packages
(package! hungry-delete)
#+end_src

*** Writing environment

DOOM offers a [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/zen][zen]] module which has some nice features for writing text. I just tweak its appearance a bit.

#+begin_src emacs-lisp :noweb-ref config
(use-package! writeroom-mode
  :config
  (setq writeroom-width 0.5
        +zen-text-scale 0))
#+end_src

** Default Applications

Lets set the browser depending on what environment we are running in.

- WSL
  1. =brave= if present
  2. =chrome= if present
  3. =nil=
- LINUX
  1. =$BROWSER= if set
  2. =nil=

#+begin_src emacs-lisp :noweb-ref config
(setq db/browser (if IS-WSL
                     (progn (let* ((brave-path "/mnt/c/Program Files (x86)/Brave/Chrome/Application")
                                   (chrome-path "/mnt/c/Program Files (x86)/Google/Chrome/Application"))
                              (cond ((when (file-directory-p brave-path) (concat brave-path "/brave.exe")))
                                    ((when (file-directory-p chrome-path) (concat chrome-path "/chrome.exe")))
                                    (t nil))))
                   (or (getenv "BROWSER") nil)))
#+end_src

Open links the proper browser.

#+begin_src emacs-lisp :noweb-ref config
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program db/browser)
#+end_src

Automatically use =zsh= when using =ansi-term=

#+begin_src emacs-lisp :noweb-ref config
(defadvice ansi-term (before force-bash)
  (interactive (list (getenv "SHELL"))))
(ad-activate 'ansi-term)
#+end_src

** User Interface

Set the font and theme.

#+begin_src emacs-lisp :noweb-ref config
(setq doom-theme 'doom-monokai-spectrum
      doom-font (font-spec :family "Fira Code Retina" :size 17)
      doom-big-font (font-spec :family "Fira Code Retina" :size 20)
      doom-variable-pitch-font (font-spec :family "Fira Code Retina" :size 17))
#+end_src

#+begin_src emacs-lisp :noweb-ref external-packages
"font-fira-code"
#+end_src

I want my waybar to always have the colors of my current theme. Ideally, it would change the colors on the fly every time I change my theme.
The idea is to export the theme's current colors, format and save them as css to =xdg-config-home/waybar/colors.css=. In my waybar config I can then =@import= them. All that is left to do is reload the sway config with =swaymsg reload=.

The following function does this. In addition I execute it every time I change my theme with the =advice-add=.

*Note*: This may not work with every theme. I tried to add fallback colors (see the multiple =(or ...)= statements). However, I wasn't able to cover all cases.

#+begin_src emacs-lisp :noweb-ref config
(defun db/update-waybar-colors (&optional file-path)
  "Update the waybar colors and restart it.
This may not work with every theme."
  (let ((file-path (or file-path
                       (concat (or xdg-config-home
                                   (getenv "XDG_CONFIG_HOME")
                                   "~/.config")
                               "/waybar/colors.css"))))
    (with-temp-buffer
      (insert "@define-color" ?\s "theme-bg"     ?\s (face-attribute 'default                           :background) ";" ?\n
              "@define-color" ?\s "theme-fg"     ?\s (face-attribute 'default                           :foreground) ";" ?\n
              "@define-color" ?\s "theme-b0"     ?\s (face-attribute 'highlight                         :foreground nil 'default) ";" ?\n
              "@define-color" ?\s "theme-b1"     ?\s (face-attribute 'tooltip                           :background nil 'default) ";" ?\n
              "@define-color" ?\s "theme-b2"     ?\s (face-attribute 'default                           :background) ";" ?\n
              "@define-color" ?\s "theme-b3"     ?\s (face-attribute 'region                            :background nil 'default) ";" ?\n
              "@define-color" ?\s "theme-b4"     ?\s (face-attribute 'fringe                            :foreground nil (list 'region 'default)) ";" ?\n
              "@define-color" ?\s "theme-b5"     ?\s (face-attribute 'shadow                            :foreground nil 'default) ";" ?\n
              "@define-color" ?\s "theme-b6"     ?\s (face-attribute 'font-lock-comment-face            :foreground nil 'default) ";" ?\n
              "@define-color" ?\s "theme-b7"     ?\s (face-attribute 'line-number-current-line          :foreground nil (list 'font-lock-comment-face 'default)) ";" ?\n
              "@define-color" ?\s "theme-b8"     ?\s (face-attribute 'match                             :foreground nil (list 'line-number-current-line 'font-lock-comment-face 'default)) ";" ?\n
              "@define-color" ?\s "theme-red"    ?\s (face-attribute 'font-lock-preprocessor-face       :foreground nil (list 'warning 'default)) ";" ?\n
              "@define-color" ?\s "theme-orange" ?\s (face-attribute 'warning                           :foreground nil 'default) ";" ?\n
              "@define-color" ?\s "theme-green"  ?\s (face-attribute 'font-lock-function-name-face      :foreground nil 'default) ";" ?\n
              "@define-color" ?\s "theme-yellow" ?\s (face-attribute 'font-lock-string-face             :foreground nil 'default) ";" ?\n
              "@define-color" ?\s "theme-violet" ?\s (face-attribute 'font-lock-constant-face           :foreground nil 'default) ";" ?\n
              "@define-color" ?\s "theme-cyan"   ?\s (face-attribute 'font-lock-type-face               :foreground nil 'defauult) ";")
      (write-region (point-min) (point-max) file-path)
      (call-process "swaymsg" nil 0 nil "reload"))))

(advice-add 'enable-theme :after (cmd! (db/update-waybar-colors "~/.config/waybar/colors.css")))
#+end_src

** Window Management

Emacs has the ability to spawn windows on demand. However, controlling their placement is as close to rocket science as it gets. Here is a quote from the DOOM manual:

#+begin_quote
Not all windows are created equally. Some are less important. Some I want gone once they have served their purpose, like code out or a help buffer. Others I want to stick around, like a scratch buffer or org-capture popup.
#+end_quote

There are a couple of ways to control the way Emacs spawns windows. One can dig in an customize =display-buffer-alist=, the function responsible for deciding how and where to place a window. However, I believe the Emacs manual itself states that understanding and therefore properly customizing the function itself is not easy. There also are a couple of packages, most notably =shackle=, which is an option. However DOOM also features a built-in popup manager. Let's use it and define some rules.

#+begin_src emacs-lisp :noweb-ref config
(set-popup-rules!
  '(
    ("^\\*\\([Hh]elp\\|Apropos\\)"                              :side right :slot 0 :vslot 0 :width 0.25 :select t :quit 'current :modeline nil)
    ("^\\*Buffer List\\*$"                                      :side right :slot 0 :vslot 0 :width 0.25 :select t :quit 'current :modeline nil)
    ("^\\*Password-Store"                                       :side left  :slot 0 :vslot 0 :width 0.20 :select t :quit 'current :modeline nil)
    ("^\\*Warnings\\*$"                                         :side bottom :slot 0 :vslot 0 :height 0.20 :select t :quit 'current :modeline nil)
    ("^\\*Messages\\*$"                                         :side bottom :slot 0 :vslot 0 :height 0.20 :select t :quit 'current :modeline nil)
    ("^\\*Local Variables\\*$"                                  :side bottom :slot 0 :vslot 0 :height 0.20 :select t :quit 'current :modeline nil)
    ("^\\*Shell Command Output\\*$"                             :side bottom :slot 0 :vslot 0 :height 0.20 :select t :quit 'current :modeline nil)
    ("^\\*Async Shell Command\\*$"                              :side bottom :slot 0 :vslot 0 :height 0.20 :select t :quit 'current :modeline nil)
    ("^\\*doom:"                                                :vslot -4 :size 0.35 :autosave t :select t :modeline t :quit nil :ttl t)
    ("^\\*doom:\\(?:v?term\\|e?shell\\)-popup"                  :vslot -5 :size 0.35 :select t :modeline nil :quit nil :ttl nil)
    ("^\\*\\(?:doom \\|Pp E\\)"                                 :vslot -3 :size +popup-shrink-to-fit :autosave t :select ignore :quit t :ttl 0)
    ("^\\*\\(?:[Cc]ompil\\(?:ation\\|e-Log\\)\\|Messages\\)"    :vslot -2 :size 0.3  :autosave t :quit t :ttl nil)
    ))
#+end_src

#+begin_src emacs-lisp :noweb-ref config
(use-package! popper
  :bind (("C-<escape>" . popper-toggle-latest)
         ("M-<escape>" . popper-cycle)
         ("C-M-<escape>" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("^\\*\\([Hh]elp\\|Apropos\\)"
          "^\\*Buffer List\\*$"
          "^\\*Warnings\\*$"
          "^\\*Messages\\*$"
          "^\\*Local Variables\\*$"
          "^\\*Shell Command Output\\*$"
          "^\\*Async Shell Command\\*$"
          help-mode
          helpful-mode
          pass-mode))
  (popper-mode +1)
  :config
  (setq popper-display-control nil))
#+end_src

#+begin_src emacs-lisp :noweb-ref packages
(package! popper)
(package! lv)
#+end_src

#+begin_src emacs-lisp :noweb-ref config
(add-hook! (helpful-mode help-mode)
  (buffer-face-set :height 105))
#+End_src

** Completion System

I am using the [[https://github.com/minad/vertico][vertico]] stack for completion in emacs, besides vertico, this includes [[https://github.com/minad/consult][consult]], [[https://github.com/minad/marginalia][marginalia]], [[https://github.com/oantolin/orderless][orderless]], [[https://github.com/oantolin/embark][embark]] and [[https://github.com/minad/corfu][corfu]].
Vertico is a

#+BEGIN_QUOTE
performant and minimalistic vertical completion AI, which is based on the default completion system
#+END_QUOTE

similar to [[https://github.com/abo-abo/swiper][ivy]] or [[https://github.com/emacs-helm/helm][helm]]. However, I like the minimalist in the vertico completion stack. DOOM [[https://github.com/hlissner/doom-emacs/commit/34f8e1fdec8f8b2e334f8e12a271303b3eddd262#diff-38218dc5c71b15e7d754cb90217cfd037bf6d98b2fd9fb9298e049443ee713dc][recently]] added vertico as a completion module, this saves me the trouble of configuring it myself. However, they are yet to add corfu to the mix.

However, there are still some values I'd like to tweak to my liking.

#+begin_src emacs-lisp :noweb-ref config
(use-package! vertico
  :config
  (setq vertico-count 10
        vertico-resize nil))
#+end_src

Corfu offers a minimalist =completion-in-region= enhancement.

#+begin_src emacs-lisp :noweb-ref config
(use-package! corfu
  :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous))
  :custom
  (corfu-cycle t)
  (corfu-auto t)

  :init
  (corfu-global-mode)

  :config
  ;; https://github.com/minad/corfu/issues/12#issuecomment-869037519
  (advice-add 'corfu--setup :after 'evil-normalize-keymaps)
  (advice-add 'corfu--teardown :after 'evil-normalize-keymaps)
  (evil-make-overriding-map corfu-map))
#+end_src

#+begin_src emacs-lisp :noweb-ref packages
(package! corfu)
#+end_src

Emacs offers [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html][dynamic abbreviations]], simply called =dabbrev=. Corfu works well with them.

#+begin_src emacs-lisp :noweb-ref config
(use-package! dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))
#+end_src

#+begin_src emacs-lisp :noweb-ref external-packages
"fd"
"ripgrep"
#+end_src

* Applications
** App launcher

I use [[https://github.com/SebastienWae/app-launcher][app-launcher]] to launch external applications.

#+begin_src emacs-lisp :noweb-ref packages
(package! app-launcher
  :recipe (:host github :repo "SebastienWae/app-launcher"))
#+end_src
** IRC

I use DOOM's IRC [[https://github.com/hlissner/doom-emacs/tree/develop/modules/app/irc][module]] to connect to IRC.

#+begin_src emacs-lisp :noweb-ref config
(after! circe
  (set-irc-server! "minikn.xyz"
    `(:tls t
      :port 6698
      :nick ,(+pass-get-user "IRC/znc/db")
      :pass (lambda (&rest _) (+pass-get-secret "IRC/znc/db")))))
#+end_src

** Pass

I use [[https://www.passwordstore.org/][pass]] as my password manager. Luckily DOOM provides a module for it. So I don't need any configuration besides declaring the external packages needed.

#+begin_src scheme :noweb-ref external-packages
"password-store"
"gnutls"
#+end_src

** Pinentry

I use [[https://gnupg.org][GnuPG]] to manage my keys. More information about the system setup of GnuPG can be found [[file:Desktop.org::*GnuPG][here]]. This all is fine, but I want to be prompted for my pass phrase in the mini buffer when working with git or similar tools. We can use the =pinentry= package for that, it needs some additional configuration to work. After that, we need to start it with =pinentry-start=.

With that configuration (together with the configuration in [[Desktop.org][Desktop.org]]) I'll be prompted for my pass phrase when encrypting, signing or authenticating. Neat!

#+begin_src emacs-lisp :noweb-ref config
(use-package! pinentry
  :config
  (setq epa-pinentry-mode 'loopback)
  (shell-command "gpg-connect-agent /bye")
  (pinentry-start))
#+end_src

#+begin_src emacs-lisp :noweb-ref packages
(package! pinentry)
#+end_src

* Development Environment

I spend most of my time in emacs. This (obviously) includes programming. This section covers my configuration for turning emacs into an IDE. I use [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] as my foundation for this. In addition to that, I also need external tools (linters, build tools, ...).

I use [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-environment.html][guix environment]] to set up my development environments. I separate my environments based on languages where it makes sense. In an isolated environment, Guix can load packages ad hoc and provide a shell to interact with it. For example

#+begin_src sh :tangle no
guix environment --ad-hoc node -- npm -v
#+end_src

executes =npm -v= in an isolated node environment. Great, isn't it? There is much more to this, refer to the docs if needed.

However, what about packages (like certain npm packages) that I need in an environment, but that are not available through Guix? For that purpose, I create a wrapper script for every environment that checks development dependencies and installs them on the fly if needed (See sections for each language).

** Generic settings

Setting a high threshold for file watchers:

#+begin_src emacs-lisp :noweb-ref config
(after! lsp-mode
  (setq lsp-auto-guess-root nil
        lsp-file-watch-threshold 10000))
#+end_src

*** =lsp-ui=
#+begin_src emacs-lisp :noweb-ref config
(after! lsp-ui
  (setq lsp-ui-peek-list-width 100
        lsp-ui-peek-fontify 'always
        lsp-ui-doc-position 'top
        lsp-ui-doc-alignment 'window
        lsp-ui-doc-max-height 30
        lsp-ui-doc-max-width 90
        lsp-ui-doc-border "white"
        lsp-ui-imenu-enable nil))
#+end_src

*** =lsp-treemacs=
#+begin_src emacs-lisp :noweb-ref config
(after! treemacs
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (setq treemacs-show-hidden-files t
        treemacs-follow-after-init t
        treemacs-silent-filewatch t
        treemacs-silent-refresh t
        treemacs-recenter-after-file-follow 'always))

 (with-eval-after-load 'lsp-treemacs
  (setq lsp-treemacs-symbols-position-params
        `((side . right)
          (slot . 1)
          (window-width . ,treemacs-width))))
#+end_src

I like using the symbol list using =lsp-treemacs=. This function allows me to quickly toggle it:

#+begin_src emacs-lisp :noweb-ref config
(defun db/lsp-treemacs-symbols-toggle ()
  "Toggle the lsp-treemacs-symbols buffer."
  (interactive)
  (if (get-buffer "*LSP Symbols List*")
      (kill-buffer "*LSP Symbols List*")
    (progn (lsp-treemacs-symbols)
           (other-window -1))))
#+end_src

** Languages
*** Node/JS/TS

This is the development configuration for =node=, =js= and =ts=.

**** Environment

I frequently develop using [[https://nodejs.org/en/][node]]. It comes with [[https://www.npmjs.com/][npm]], its package manager. Installing npm packages globally requires =sudo= permissions (which Guix doesn't like). To make this work, I set the =$NPM_PACKAGES= environment variable manually.

#+begin_src sh :tangle (concat (cdr (assoc 'profiled-home file-paths)) "/npm") :tangle-mode (identity #o755) :mkdirp yes
NPM_PACKAGES="${XDG_DATA_HOME}"/npm
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}"/npm/npmrc
export MANPATH="${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man"
export PATH="$PATH:$NPM_PACKAGES/bin"

if [ ! -d $NPM_PACKAGES ]; then
    mkdir -p $NPM_PACKAGES
fi
#+end_src

#+begin_src sh :tangle (concat (cdr (assoc 'xdg-config-home file-paths)) "/npm/npmrc") :mkdirp yes
prefix=${XDG_DATA_HOME}/npm
cache=${XDG_CACHE_HOME}/npm
tmp=${XDG_RUNTIME_DIR}/npm
init-module=${XDG_CONFIG_HOME}/npm/config/npm-init.js
#+end_src

This configuration is for the development environment to work properly. All the npm packages I need by default (like =eslint= or =typescript=) are installed in =xdg-data-home/npm=, therefore, I can create a environment wrapper that checks if all the tools needed are installed and does so if not.

#+begin_src sh :tangle (concat (cdr (assoc 'bindir file-paths)) "/node-env") :tangle-mode (identity #o755) :mkdirp yes :shebang "#!/usr/bin/env sh"
NPM_DIR="${XDG_DATA_HOME}"/npm

check_external_dep() {
    local REPO=$(basename ${1} .git)
    if [ ! -d "${NPM_DIR}"/"${REPO}" ]; then
        echo "${REPO} not found. Cloning...";
        git clone "${1}" "${NPM_DIR}"/"${REPO}" > /dev/null
        cd "${NPM_DIR}"/"${REPO}"
        echo "Building..."
        guix environment --ad-hoc node -- npm install > /dev/null
        guix environment --ad-hoc node -- npm run compile > /dev/null
    fi
}

check_npm_dep() {
    if [ ! -d "${NPM_DIR}"/lib/node_modules/"${1}" ]; then
        echo "${1} not found. Installing..."
        guix environment --ad-hoc node -- npm i -g "${1}"
    fi
}

check_external_dep "https://github.com/microsoft/vscode-eslint.git"
check_npm_dep "typescript-language-server"
check_npm_dep "typescript"

guix environment --ad-hoc node -- "${@}"
#+end_src

It can be used like so:

#+begin_src sh :tangle no
node-env npm -v
6.14.11
#+end_src

If its runtime dependencies are not satisfied, it will install them and run the command then. This only needs to be run once.

**** IDE

This part covers how I configure Emacs, especially =lsp-mode= to work for javascript / typescript development. Unfortunately, because I need to run all my executables (linters, language-servers, ...) inside the isolated environment, I need to tweak certain paths.

Path to the =eslint= server:

#+begin_src emacs-lisp :noweb-ref config
 (setq lsp-eslint-node "node-env node"
       lsp-eslint-server-command
       `("node-env"
         "node"
         ,(concat xdg-data-home "/npm/vscode-eslint/server/out/eslintServer.js")
         "--stdio"))
#+end_src

Path to the =typescript-language-server=:

#+begin_src emacs-lisp :noweb-ref config
(setq lsp-clients-typescript-tls-path "node-env-ts-ls")
#+end_src

Unfortunately, setting it to =node-env typescript-language-server= doesn't work, because =lsp-mode= resolves the full path of =lsp-clients-typescript-tls-path=. Therefore I need a small wrapper script (=node-env-ts-ls=) which then calls the correct binary inside my environment.

#+begin_src sh :tangle (concat (cdr (assoc 'bindir file-paths)) "/node-env-ts-ls") :tangle-mode (identity #o755) :mkdirp yes :shebang "#!/usr/bin/env sh"
node-env typescript-language-server "${@}"
#+end_src

Path to =npm=:

#+begin_src emacs-lisp :noweb-ref config
(setq npm-mode--npm-executable "node-env npm")
#+end_src

The original =npm-mode= package doesn't come with the ability to change the =npm= command. So I forked it and added the functionality.

#+begin_src emacs-lisp :noweb-ref packages
(unpin! npm-mode)
(package! npm-mode :recipe (:host github :repo "minikN/npm-mode"))
#+end_src

*** PHP

#+begin_src sh :tangle (concat (cdr (assoc 'profiled-home file-paths)) "/php") :tangle-mode (identity #o755) :mkdirp yes
# if command -v php &> /dev/null; then
#     if ! test -x "${BINDIR}/composer"; then
#         php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
#         php "composer-setup.php"
#         php -r "unlink('composer-setup.php');"
#         mv composer.phar ${BINDIR}/composer
#         chmod +x ${BINDIR}/composer
#     fi
# fi
#+end_src

#+begin_src scheme :noweb-ref dev-packages
;"php"
#+end_src

*** ORG
**** Key bindings

#+begin_src emacs-lisp :noweb-ref config
(map! :map org-mode-map
      :localleader
      (:when (featurep! :ui zen)
       :desc "Toggle reader mode"      "z"     #'+zen/toggle))
#+end_src

* Local Variables :noexport:
# Local Variables:
# eval: (setq-local file-paths '())
# eval: (map-put file-paths 'xdg-config-home (or (getenv "XDG_CONFIG_HOME") "~/.config"))
# eval: (map-put file-paths 'xdg-data-home (or (getenv "XDG_DATA_HOME") "~/.local/share"))
# eval: (map-put file-paths 'profiled-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/profile.d"))
# eval: (map-put file-paths 'npm-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/npm"))
# eval: (map-put file-paths 'doomdir (concat (cdr (assoc 'xdg-config-home file-paths)) "/doom"))
# eval: (map-put file-paths 'guix-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/guix"))
# eval: (map-put file-paths 'guix-manifest-home (concat (cdr (assoc 'guix-config-home file-paths)) "/manifests"))
# eval: (map-put file-paths 'bindir (concat (cdr (assoc 'xdg-data-home file-paths)) "/bin"))
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload DOOM?") (doom/reload))) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload Emacs profile?") (async-shell-command "update-manifest emacs"))) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle the file?") (org-babel-tangle))) nil t)
# End:
