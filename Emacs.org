#+TITLE: Emacs Configuration
#+AUTHOR: Demis Balbach
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o444)
#+DOOMDIR: ~/.config/doom/
#+MANIFEST: ~/.config/guix/manifests/emacs.scm

This file includes the complete configuration for my Emacs setup. Although I have started an emacs config from scratch when I first got into emacs, I soon realized that there are great [[https://github.com/caisah/emacs.dz][pre-built configurations]] out there that save you a lot of time and head-scratching when delving into the rabbit hole that is emacs. However, pre-built configurations themselves can be a rabbit hole as the linked table hopefully shows. Personally, I settled with [[https://github.com/hlissner/doom-emacs][Doom Emacs]], it's a popular configuration and for good reason. I can't imagine going back to anything else at this point.

I like to have *one* ORG file to configure emacs. Doom on the other hand expects three files to be present: =$DOOMDIR/init.el= for its active modules, =$DOOMDIR/config.el= as a main configuration and =$DOOMDIR/packages.el= for package declarations. Well, what is ORG mode good for if not tangling files? Just kidding. Generally speaking, the source blocks of this file will be tangled to =config.el= while I'll tangle bits and pieces to =init.el= and =packages.el= where needed. I also create =emacs.scm= in =~/.config/guix/manifests= for external packages (binaries, fonts, ...) I need.

#+begin_src emacs-lisp :tangle (cadr (assoc "MANIFEST" (org-collect-keywords '("MANIFEST")))) :noweb yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Emacs.org

(specifications->manifest
 '(
   "emacs-pgtk-native-comp"
   <<external-packages>>
   ))
#+end_src

* Table Of Contents :TOC:
- [[#todo][TODO]]
  - [[#packages][Packages]]
- [[#modules][Modules]]
  - [[#user-interface][User Interface]]
  - [[#editor][Editor]]
  - [[#emacs][Emacs]]
  - [[#terminal][Terminal]]
  - [[#checkers][Checkers]]
  - [[#tools][Tools]]
  - [[#languages][Languages]]
  - [[#email][Email]]
  - [[#applications][Applications]]
- [[#basic-settings][Basic Settings]]
  - [[#editor-1][Editor]]
  - [[#wayland][Wayland]]
  - [[#default-applications][Default Applications]]
  - [[#user-interface-1][User Interface]]
  - [[#window-management][Window Management]]
- [[#applications-1][Applications]]
  - [[#pinentry][Pinentry]]
- [[#local-variables][Local Variables]]

* TODO
- popper key bindings via =general=
** Packages
=move-text=

* Modules
First, let's define the modules doom should use. These go into =$DOOMDIR/init.el=. Note that you can also declare your own modules, there's a [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#writing-your-own-modules][section]] about it in the documentation. Please note that this list is shortened, I excluded module sections I will never use.

*Note*: I removed the =:completion= block entirely. I don't use any of the completion solutions provided by doom. Instead, I use my own set of packages centered around [[https://github.com/minad/vertico][vertico]].
#+begin_src emacs-lisp :tangle (concat (cadr (assoc "DOOMDIR" (org-collect-keywords '("DOOMDIR")))) "init.el") :noweb yes
;;; init.el -*- lexical-binding: t; -*-
;; This file is auto-generated. Do not make changes manually.
;; Exported from Emacs.org
11
(doom! :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       (default +smartparens))
#+end_src

** User Interface
#+begin_src emacs-lisp :noweb-ref doom-ui
;;(emoji +unicode)      ; ðŸ™‚
;;deft                  ; notational velocity for Emacs
;;doom-quit             ; DOOM quit-message prompts when you quit Emacs
;;fill-column           ; a `fill-column' indicator
;;hydra
;;indent-guides         ; highlighted indent columns
;;ligatures             ; ligatures and symbols to make your code pretty again
;;minimap               ; show a map of the code on the side
;;nav-flash             ; blink cursor line after big motions
;;neotree               ; a project drawer, like NERDTree for vim
;;tabs                  ; a tab bar for Emacs
;;treemacs              ; a project drawer, like neotree but cooler
;;unicode               ; extended unicode support for various languages
;;vc-gutter             ; vcs diff in the fringe
;;vi-tilde-fringe       ; fringe tildes to mark beyond EOB
;;window-select         ; visually switch windows
;;zen                   ; distraction-free coding or writing
doom                    ; what makes DOOM look the way it does
doom-dashboard          ; a nifty splash screen for Emacs
hl-todo                 ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
modeline                ; snazzy, Atom-inspired modeline, plus API
ophints                 ; highlight the region an operation acts on
popup                   ; tame sudden yet inevitable temporary windows
workspaces              ; tab emulation, persistence & separate workspaces
#+end_src

** Editor
#+begin_src emacs-lisp :noweb-ref doom-editor
(evil +everywhere)      ; come to the dark side, we have cookies
;;(format +onsave)      ; automated prettiness
;;fold                  ; (nigh) universal code folding
;;god                   ; run Emacs commands without modifier keys
;;lispy                 ; vim for lisp, for people who don't like vim
;;multiple-cursors      ; editing in many places at once
;;objed                 ; text object editing for the innocent
;;parinfer              ; turn lisp into python, sort of
;;rotate-text           ; cycle region at point between text candidates
;;word-wrap             ; soft wrapping with language-aware indent
file-templates          ; auto-snippets for empty files
snippets                ; my elves. They type so I don't have to
#+end_src

** Emacs
#+begin_src emacs-lisp :noweb-ref doom-emacs
;;ibuffer               ; interactive buffer management
dired                   ; making dired pretty [functional]
electric                ; smarter, keyword-based electric-indent
undo                    ; persistent, smarter undo for your inevitable mistakes
vc                      ; version-control and Emacs, sitting in a tree
#+end_src

** Terminal
#+begin_src emacs-lisp :noweb-ref doom-term
;;eshell                ; the elisp shell that works everywhere
;;shell                 ; simple shell REPL for Emacs
;;term                  ; basic terminal emulator for Emacs
;;vterm                 ; the best terminal emulation in Emacs
#+end_src

** Checkers
#+begin_src emacs-lisp :noweb-ref doom-checkers
(spell +flyspell)       ; tasing you for misspelling mispelling
syntax                  ; tasing you for every semicolon you forget
grammar                 ; tasing grammar mistake every you make
#+end_src

=flyspell= requires =ispell=. Let's install it.
#+begin_src emacs-lisp :tangle no :noweb-ref external-packages
"ispell"
#+end_src

** Tools
#+begin_src emacs-lisp :noweb-ref doom-tools
(eval +overlay)         ; run code, run (also, repls)
;;ansible
;;debugger              ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig          ; let someone else argue about tabs vs spaces
;;ein                   ; tame Jupyter notebooks with emacs
;;gist                  ; interacting with github gists
;;lsp
;;make                  ; run make tasks from Emacs
;;pass                  ; password manager for nerds
;;pdf                   ; pdf enhancements
;;prodigy               ; FIXME managing external services & code builders
;;rgb                   ; creating color strings
;;taskrunner            ; taskrunner for all your projects
;;terraform             ; infrastructure as code
;;tmux                  ; an API for interacting with tmux
lookup                  ; navigate your code and its documentation
magit                   ; a git porcelain for Emacs
;;upload                ; map local to remote projects via ssh/ftp
#+end_src

** Languages
#+begin_src emacs-lisp :noweb-ref doom-lang
;;(dart +flutter)       ; paint ui and not much else
;;(go +lsp)             ; the hipster dialect
;;(haskell +dante)      ; a language that's lazier than I am
;;(java +meghanada)     ; the poster child for carpal tunnel syndrome
;;(ruby +rails)         ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;(scheme +guile)       ; a fully conniving family of lisps
;;agda                  ; types of types of types of types...
;;beancount             ; mind the GAAP
;;cc                    ; C > C++ == 1
;;clojure               ; java with a lisp
;;common-lisp           ; if you've seen one lisp, you've seen them all
;;coq                   ; proofs-as-programs
;;crystal               ; ruby at the speed of c
;;csharp                ; unity, .NET, and mono shenanigans
;;data                  ; config/data formats
;;elixir                ; erlang done right
;;elm                   ; care for a cup of TEA?
;;erlang                ; an elegant language for a more civilized age
;;ess                   ; emacs speaks statistics
;;factor
;;faust                 ; dsp, but you get to keep your soul
;;fsharp                ; ML stands for Microsoft's Language
;;fstar                 ; (dependent) types and (monadic) effects and Z3
;;gdscript              ; the language you waited for
;;hy                    ; readability of scheme w/ speed of python
;;idris                 ; a language you can depend on
;;javascript            ; all(hope(abandon(ye(who(enter(here))))))
;;json                  ; At least it ain't XML
;;julia                 ; a better, faster MATLAB
;;kotlin                ; a better, slicker Java(Script)
;;latex                 ; writing papers in Emacs has never been so fun
;;lean                  ; for folks with too much to prove
;;ledger                ; be audit you can be
;;lua                   ; one-based indices? one-based indices
;;markdown              ; writing docs for people to ignore
;;nim                   ; python + lisp at the speed of c
;;nix                   ; I hereby declare "nix geht mehr!"
;;ocaml                 ; an objective camel
;;php                   ; perl's insecure younger brother
;;plantuml              ; diagrams for confusing people more
;;purescript            ; javascript, but functional
;;python                ; beautiful is better than ugly
;;qt                    ; the 'cutest' gui framework ever
;;racket                ; a DSL for DSLs
;;raku                  ; the artist formerly known as perl6
;;rest                  ; Emacs as a REST client
;;rst                   ; ReST in peace
;;rust                  ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala                 ; java, but good
;;sml
;;solidity              ; do you need a blockchain? No.
;;swift                 ; who asked for emoji variables?
;;terra                 ; Earth and Moon in alignment for performance.
;;web                   ; the tubes
;;yaml                  ; JSON, but readable
;;zig                   ; C, but simpler
emacs-lisp              ; drown in parentheses
org                     ; organize your plain life in plain text
sh                      ; she sells {ba,z,fi}sh shells on the C xor
#+end_src

** Email
#+begin_src emacs-lisp :noweb-ref doom-email
;;(mu4e +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

** Applications
#+begin_src emacs-lisp :noweb-ref doom-app
;;(rss +org)            ; emacs as an RSS reader
;;calendar
;;emms
;;everywhere            ; *leave* Emacs!? You must be joking
;;irc                   ; how neckbeards socialize
;;twitter               ; twitter client https://twitter.com/vnought
#+end_src
* Basic Settings
This chapter covers the essential configuration. While I do enjoy GNU/Guix, I currently don't use it to manage my emacs packages (Exceptions to this will be clarified as such). The reason for this is that doom comes with its own package manager built on top of [[https://github.com/raxod502/straight.el][straight.el]], which is (in my opinion) superior to Guix. Doom looks for package definitions in =$DOOMDIR/packages.el=, therefore, I'll create the file and add package definitions to it wherever needed.

#+begin_src emacs-lisp :tangle (concat (cadr (assoc "DOOMDIR" (org-collect-keywords '("DOOMDIR")))) "packages.el") :noweb yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
;;; This file is auto-generated. Do not make changes manually.
;;; Exported from Emacs.org

<<packages>>
#+end_src

#+begin_src emacs-lisp :tangle (concat (cadr (assoc "DOOMDIR" (org-collect-keywords '("DOOMDIR")))) "config.el") :noweb yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;; This file is auto-generated. Do not make changes manually.
;;; Exported from Emacs.org

<<config>>
#+end_src

Set global user information.

#+begin_src emacs-lisp :noweb-ref config
(setq user-full-name "Demis Balbach"
      user-nick-name "minikN"
      user-mail-address "db@minikn.xyz")
#+end_src

** Editor

Some sensible defaults for working with emacs.

#+begin_src emacs-lisp :noweb-ref config
(setq-default
 undo-limit (* 8 1024 1024)                     ; Set the undo history limit to 80 MB
 gc-cons-threshold (* 8 1024 1024)              ; Threshold for garbage collection (80 MB)
 read-process-output-max (* 1024 1024)          ; Threshold for process output (10 MB)
 evil-want-fine-undo t                          ; Be more granular with undo in insert mode
 global-auto-revert-none-file-buffers t         ; Automatically revert non-file buffers
 auto-save-default t                            ; auto-save is a nice feature
 backup-directory-alist                         ; But I don't like emacs littering my file system
 `((".*" . ,temporary-file-directory))          ; with auto-save and backup files.
 auto-save-file-name-transforms                 ; Therefore, move them to /tmp/.
 `((".*" ,temporary-file-directory t))
 delete-by-moving-to-trash t                    ; Delete by moving to trash
 ;; help-window-select t                        ; Focus new help buffers (set this with popper)
 indent-tabs-mode nil                           ; No tabs for indentation
 tab-with 4                                     ; 4 spaces = 1 tab
 scroll-margin 2                                ; Margin when scrolling vertically
 enable-local-variables t                       ; Automaticall enable safe local variables
 select-enable-clipboard t)                     ; Merge emacs' and system' clipboard.

(global-auto-revert-mode 1)                     ; Automatically revert file buffers
(global-subword-mode 1)                         ; Iterate through camelCase
(set-default-coding-systems 'utf-8)             ; Default utf-8 encoding
#+end_src

*** Default Applications
Open links the proper browser
#+begin_src emacs-lisp :noweb-ref config
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium")
#+end_src

*** User Interface
Set the theme. I use my own fork of [[https://github.com/minikN/emacs-doom-themes][doom-themes]] and I need to configure it separately to make use of my changes, namely =doom-colors-extended= as the treemacs theme.
#+begin_src emacs-lisp :noweb-ref config
(use-package! doom-themes
  :defer t
  :init
  (setq doom-theme 'doom-monokai-spectrum
        doom-themes-treemacs-enable-variable-pitch nil
        doom-themes-treemacs-theme "doom-colors-extended"
        lsp-treemacs-theme "doom-colors-extended")

  ;; improve integration w/ org-mode
  (add-hook 'doom-load-theme-hook #'doom-themes-org-config)

  ;; more Atom-esque file icons for neotree/treemacs
  (when (featurep! :ui treemacs)
    (add-hook 'doom-load-theme-hook #'doom-themes-treemacs-config)))
#+end_src

#+begin_src emacs-lisp :noweb-ref packages
(package! emacs-doom-themes
  :recipe (:host github
           :repo "minikN/emacs-doom-themes"
           :files ("*.el" "themes/*.el")))
#+end_src

Set the font and line spacing.
#+begin_src emacs-lisp :noweb-ref config
(setq line-spacing 0.2
      doom-font (font-spec :family "Fira Code Retina" :size 17))
#+end_src

#+begin_src emacs-lisp :noweb-ref external-packages
"font-fira-code"
#+end_src

** Window Management

Emacs has the ability to spawn windows on demand. However, controlling their placement is as close to rocket science as it gets. Here is a quote from the DOOM manual:
#+begin_quote
Not all windows are created equally. Some are less important. Some I want gone once they have served their purpose, like code out or a help buffer. Others I want to stick around, like a scratch buffer or org-capture popup.
#+end_quote

There are a couple of ways to control the way Emacs spawns windows. One can dig in an customize =display-buffer-alist=, the function responsible for deciding how and where to place a window. However, I believe the Emacs manual itself states that understanding and therefore properly customizing the function itself is not easy. There also are a couple of packages, most notably =shackle=, which is an option. However DOOM also features a built-in popup manager. Let's use it and define some rules.

#+begin_src emacs-lisp :noweb-ref config
(set-popup-rules!
  '(
    ("^\\*\\([Hh]elp\\|Apropos\\)"      :side right :slot 0 :vslot 0 :width 0.25 :select t :quit 'current :modeline nil)
    ("^\\*Buffer List\\*$"              :side right :slot 0 :vslot 0 :width 0.25 :select t :quit 'current :modeline nil)
    ("^\\*Warnings\\*$"                 :side bottom :slot 0 :vslot 0 :height 0.20 :select t :quit 'current :modeline nil)
    ("^\\*Messages\\*$"                 :side bottom :slot 0 :vslot 0 :height 0.20 :select t :quit 'current :modeline nil)
    ))
#+end_src

#+begin_src emacs-lisp :noweb-ref config
(use-package! popper
  :bind (("C-<escape>" . popper-toggle-latest)
         ("M-<escape>" . popper-cycle)
         ("C-M-<escape>" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("^\\*\\([Hh]elp\\|Apropos\\)"
          "^\\*Buffer List\\*$"
          "^\\*Warnings\\*$"
          "^\\*Messages\\*$"
          help-mode
          helpful-mode))
  (popper-mode +1)
  :config
  (setq popper-display-control nil))
#+end_src

#+begin_src emacs-lisp :noweb-ref packages
(package! popper)
#+end_src

#+begin_src emacs-lisp :noweb-ref config
(add-hook! (helpful-mode help-mode)
  (buffer-face-set :height 105))
#+End_src
* Applications
** Pinentry

I use [[https://gnupg.org][GnuPG]] to manage my keys. More information about the system setup of GnuPG can be found [[file:Desktop.org::*GnuPG][here]]. This all is fine, but I want to be prompted for my passphrase in the mini buffer when working with git or similar tools. We can use the =pinentry= package for that, it needs some additional configuration to work. After that, we need to start it with =pinentry-start=.

With that configuration (together with the configuration in [[Desktop.org][Desktop.org]]) I'll be prompted for my passphrase when encrypting, signing or authenticating. Neat!

#+begin_src emacs-lisp :noweb-ref config
(use-package! pinentry
  :config
  (setq epa-pinentry-mode 'loopback)
  (pinentry-start))
#+end_src

#+begin_src emacs-lisp :noweb-ref packages
(package! pinentry)
#+end_src

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload DOOM?") (doom/reload))) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle the file?") (org-babel-tangle))) nil t)
# End:
