#+TITLE: Desktop Environment Configuration
#+SUBTITLE: Everything You Need To Know About My Userspace
#+AUTHOR: Demis Balbach
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o444)

This file contains the configuration for my user space. Please note however, that it does not include my Emacs configuration. I maintain a separate [[file:Emacs.org][file]] to configure it.
You are reading a [[https://leanpub.com/lit-config/read][literate]] configuration, meaning this file not only documents my configuration, it /is/ my configuration. It will tangle all of my configuration- or dotfiles on every save.

* Table Of Contents :TOC:
- [[#exported-files][Exported Files]]
- [[#desktop-manifest][Desktop Manifest]]
- [[#environment][Environment]]
  - [[#channels][Channels]]
  - [[#exports][Exports]]
  - [[#scripts][Scripts]]
  - [[#fonts][Fonts]]
  - [[#additional-configuration][Additional Configuration]]
- [[#applications][Applications]]
  - [[#git][Git]]
  - [[#browsers][Browsers]]
  - [[#gnupg][GnuPG]]
  - [[#openssh][OpenSSH]]
  - [[#zsh][Zsh]]
  - [[#sway][Sway]]

* Exported Files

Tangling this file will create various directories and files in the home directory. However, I don't specify the target file for every source block individually, I rather declare file-local variables containing the target directories (I like [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]]). Because I follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG]] directory specification, I'll use the preferred defaults.
I set all local variables in the [[#Local Variables][Local Variables]] footer of this file (View the raw file in order to see it).

The following tables shows all the defined target directories. All exports are based on these. This table is auto-generated.

#+name: filelist
#+begin_src emacs-lisp :results value :exports results :tangle no
(append
 `(("Variable" "Path") hline)
 (cl-loop for (e) on file-paths collect
          (list (car e)
                (concat "=" (prin1-to-string (cdr e) t) "="))))
#+end_src

#+RESULTS: filelist
| Variable           | Path                              |
|--------------------+-----------------------------------|
| bindir             | =/home/db/.local/share/bin=       |
| zsh-config-home    | =/home/db/.config/zsh=            |
| sway-config-home   | =/home/db/.config/sway=           |
| guix-manifest-home | =/home/db/.config/guix/manifests= |
| guix-config-home   | =/home/db/.config/guix=           |
| git-config-home    | =/home/db/.config/git=            |
| xdg-data-home      | =/home/db/.local/share=           |
| xdg-config-home    | =/home/db/.config=                |

I may refer to these directories throughout the configuration, e.g. like that: =guix-config-home/channels.scm=.

* Desktop Manifest

I use GNU/Guix as my operating system of choice (it's great, you should too!). In addition to that, I use [[https://guix.gnu.org/cookbook/en/html_node/Guix-Profiles-in-Practice.html][profiles]] to install needed packages. Throughout this file I will need to install various packages into my desktop profile. For this to work, I need to create its manifest file =desktop.scm= at =guix-manifest-home=.

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/desktop.scm") :noweb yes :mkdirp yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Desktop.org

(specifications->manifest
 '(
   <<packages>>
   ))
#+end_src

* Environment
:PROPERTIES:
:header-args:sh: :tangle (concat (cdr (assoc 'xdg-config-home file-paths)) "/profile") :mkdirp yes
:END:

There are many ways to configure the user environment. This is Linux after all. I decided to have my system source one file inside my =xdg-config-home= called =profile=, which will then set up the environment to my liking. It is suppose to be what is usually referred to as =~/.profile=. However, because I like to keep my home folder as clean as possible I moved it.
But how does it get sourced? Please take a look at my system level =zsh= setup at [[System.org][System.org]]. It's explained there. The purpose of this file is to setup my login shell, not my interactive shell (Prompt, aliases, ...). Let's create the file.

#+begin_src sh :tangle-mode (identity #o755)
## This file is auto-generated. Do not make changes manually.
## Exported from Desktop.org
#+end_src

** Channels

These are the guix channels I currently use. The channels are going to be tangled to =guix-config-home/channels.scm= Flatwhatson's guix [[https://github.com/flatwhatson/guix-channel][channel]] offers some interesting packages, for example different Emacs variants like a =pgtk= or =native-comp= build.

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-config-home file-paths)) "/channels.scm") :mkdirp yes
(cons* (channel
        (name 'flat)
        (url "https://github.com/flatwhatson/guix-channel.git")
        (introduction
         (make-channel-introduction
          "33f86a4b48205c0dc19d7c036c85393f0766f806"
          (openpgp-fingerprint
           "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
#+end_src

The [[https://gitlab.com/nonguix/nonguix][nonguix]] channel is essential for using the full linux kernel. It offers packages, that do not get merged in the main guix channel because they violate their open source policies.

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-config-home file-paths)) "/channels.scm") :mkdirp yes
(channel
 (name 'nonguix)
 (url "https://gitlab.com/nonguix/nonguix")
 ;; Enable signature verification:
 (introduction
  (make-channel-introduction
   "46c1d8bcca674d3a71cd077c52dde9552a89873d"
   (openpgp-fingerprint
    "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
#+end_src

This is just my own personal [[https://github.com/minikN/minikn-guix][channel]]. This is a fork of the [[https://git.rekahsoft.ca/rekahsoft/guix][rekahsoft-guix]] channel because it's not available anymore.

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-config-home file-paths)) "/channels.scm") :mkdirp yes
(channel
 (name 'minikn-guix)
 (url "https://github.com/minikN/minikn-guix.git"))
%default-channels)
#+end_src

** Exports

This section covers all the global variables I define in my =profile=. This includes all =export= statements.
  
*** Guix profile

The very first thing I need to do is to export =$GUIX_PROFILE= so Guix knows where to find my profile.

#+begin_src sh
GUIX_PROFILE="${HOME}"/.guix-profile
. "${GUIX_PROFILE}"/etc/profile
#+end_src

Apart from the default profile, Guix allows me to add custom profile which group certain packages into separate files. This code block activates all available profiles. That means, after you installed them, their packages get usable.

#+begin_src sh
export GUIX_EXTRA_PROFILES="${HOME}"/.guix-extra-profiles
for i in ${GUIX_EXTRA_PROFILES}/*; do
    profile=$i/$(basename "$i")
    if [ -f "${profile}"/etc/profile ]; then
	    GUIX_PROFILE="${profile}"
	    . "${GUIX_PROFILE}"/etc/profile
    fi
    unset profile
done
#+end_src

You can install (or update) a profile like so

#+begin_src sh :tangle no
guix package --manifest=/path/to/guix-my-project-manifest.scm --profile="$GUIX_EXTRA_PROFILES"/my-project/my-project
#+end_src
    
*** XDG base directories

After setting =$GUIX_PROFILE=, the most important thing for me is to properly set my base directories following the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables][XDG specification]]. With Guix, I do not need to set =$XDG_DATA_DIRS= and =$XDG_CONFIG_DIRS= (you could of course add to them with =export XDG_CONFIG_DIRS=<your path>:$XDG_CONFIG_DIRS=) because it is already set by default. I'm fine with the default so I commented the section out.

#+begin_src sh
export XDG_CONFIG_HOME="${HOME}"/.config
export XDG_CACHE_HOME="${HOME}"/.cache
export XDG_DATA_HOME="${HOME}"/.local/share

# Add profile's share dirs to XDG_DATA_DIRS
export XDG_DATA_DIRS="${XDG_DATA_DIRS}:${GUIX_EXTRA_PROFILES}"/desktop/desktop/share
export XDG_DATA_DIRS="${XDG_DATA_DIRS}:${GUIX_EXTRA_PROFILES}"/emacs/emacs/share
export XDG_DATA_DIRS="${XDG_DATA_DIRS}:${GUIX_EXTRA_PROFILES}"/development/development/share
# export XDG_CONFIG_DIRS="/etc/xdg"

# Setting $XDG_RUNTIME_DIR
if test -z "${XDG_RUNTIME_DIR}"; then
    export XDG_RUNTIME_DIR=/tmp/${UID}-runtime-dir
    if ! test -d "${XDG_RUNTIME_DIR}"; then
	    mkdir "${XDG_RUNTIME_DIR}"
	    chmod 0700 "${XDG_RUNTIME_DIR}"
    fi
fi
#+end_src

*** Custom directories

I need a couple of custom directories. For now, =$GITDIR= is where I store all my cloned git repositories, this includes projects I'm working on. I should probably derive a =$WORKDIR= variable from it to house my work related projects, but for now this is good. =bindir= is the path to my local binaries, this would include shell scripts I need system wide access to. Hence why I add it to the =$PATH=.

#+begin_src sh
export GITDIR="${XDG_DATA_HOME}"/git
export BINDIR="${XDG_DATA_HOME}"/bin
export PATH="${BINDIR}:$PATH"
#+end_src

I use [[https://github.com/hlissner/doom-emacs][DOOM Emacs]]. It places its CLI binary into a =bin= folder inside your emacs configuration at =xdg-config-home/emacs=. It's probably useful to add this to the path as well.

#+begin_src sh
export PATH="${XDG_CONFIG_HOME}/emacs/bin:${PATH}"
#+end_src

*** Default applications

Next are variables to declare default applications. Stuff like =$BROWSER= and =$EDITOR= goes in here. Again, there is no need to set =$SHELL= manually. Guix sets it by default.

#+begin_src sh
export VISUAL="emacsclient"
export EDITOR="${VISUAL}"
export BROWSER="next"
#+end_src

*** Application specific variables

This section covers application-specific exports. This, for the most part, is an effort in keeping my home directory clean. I set my =xdg-config-home=, and many applications respect that, which is great. However, there still is a plethora of applications that are not aware of it and have default config file paths in =$HOME=.

However, many, but not all (looking at you, [[https://bugzilla.mindrot.org/show_bug.cgi?id=2050][ssh]]) of them can be configured to be aware of where I want them to put their config files. The Arch-Wiki offers a good [[https://wiki.archlinux.org/title/XDG_Base_Directory][list]] of applications that can be configured that way.
This is a list containing generic exports I need. However, each application may export its own environment variables using the =env-exports= reference.

#+begin_src sh :noweb yes
export CC="gcc"
export CUDA_CACHE_PATH="${XDG_CACHE_HOME}"/nv
export DOCKER_CONFIG="${XDG_CONFIG_HOME}"/docker
export EMACS_USER_DIRECTORY="${XDG_CONFIG_HOME}"/emacs
export LC_COLLATE="C"
export PASSWORD_STORE_DIR="${XDG_DATA_HOME}"/pass
<<env-exports>>
#+end_src

** Scripts

This section houses all my shell scripts. They will all be tangled to =bindir=. That way, I have access to them when I need to.

*** Install/Update manifests

This scripts installs or updates a given manifest. It's [[https://en.wikipedia.org/wiki/KISS_principle][KISS]]. If I need to extend it, I will. Same goes for everything I do.

#+begin_src sh :tangle (concat (cdr (assoc 'bindir file-paths)) "/update-manifest") :tangle-mode (identity #o755) :shebang "#!/bin/sh" :mkdirp yes
if [ -n "$1" ]; then
    DEST="${GUIX_EXTRA_PROFILES}"/"$1"
    PROFILE_DEST="${DEST}"/"$1"
    if [ ! -d "${DEST}" ]; then
	    mkdir -p "${DEST}"
    fi
    guix package \
	    -m "${XDG_CONFIG_HOME}"/guix/manifests/"$1".scm \
	    -p "${PROFILE_DEST}"

    # Recreate env file if doom is present
    if command -v doom &> /dev/null; then
        doom env
    fi
else
    echo "Manifest name missing."
fi

#+end_src

*** Run Emacs

This is a small wrapper around starting Emacs efficiently. If the Emacs server hasn't been started yet, it will attempt to start one and open a client connection to it. If the server has been started it will open a new frame if no frame is visible, otherwise it will use the last selected frame.

#+begin_src sh :tangle (concat (cdr (assoc 'bindir file-paths)) "/run-emacs") :tangle-mode (identity #o755) :shebang "#!/bin/sh" :mkdirp yes
if ! emacsclient -e 0 >&/dev/null; then
    emacsclient -a '' -c "$@"
elif [ $(emacsclient -n -e "(length (frame-list))") == 1 ]; then
    emacsclient -n -c "$@"
else
    emacsclient -n -e "(select-frame-set-input-focus (selected-frame))" "$@"
fi
#+end_src

*** Run WSL

A wrapper script around starting GUI applications from the Windows Subsystem for Linux.

#+begin_src sh :tangle (concat (cdr (assoc 'bindir file-paths)) "/run-wsl") :tangle-mode (identity #o755) :shebang "#!/bin/sh" :mkdirp yes
if uname -r | grep -q 'microsoft'; then
    . $HOME/.config/profile
    export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0
    export LIBGL_ALWAYS_INDIRECT=1
    export XCURSOR_SIZE=16
    setsid $1
fi
#+end_src

** Fonts

In terms of configuration, I don't pack all the fonts I install together. I rather install and describe them in the context where they are needed. However, for fonts to work in general, I need to add the proper path to =fontconfig=. This needs to be done for every profile that installs fonts. Fortunately, =fontconfig= supports the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables][XDG directory specification]]. This means I can use =xdg-config-home/fontconfig= to configure it.

#+begin_src xml :tangle (concat (cdr (assoc 'xdg-config-home file-paths)) "/fontconfig/fonts.conf") :mkdirp yes
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <dir>~/.guix-extra-profiles/desktop/desktop/share/fonts</dir>
  <dir>~/.guix-extra-profiles/emacs/emacs/share/fonts</dir>
</fontconfig>
#+end_src

** Additional Configuration

I want to configure some applications somehwere else (for example development tools like [[https://www.npmjs.com/][npm]] inside my [[file:Emacs.org][Emacs configuration]]). In order for this to work I need to source their configuration files through my =profile=. Therefore, I create =xdg-config-home/profile.d= and source every file in it.

#+begin_src sh
if [ ! -d "${XDG_CONFIG_HOME}"/profile.d ]; then
    mkdir -p "${XDG_CONFIG_HOME}"/profile.d
fi

for file in ${XDG_CONFIG_HOME}/profile.d/*; do
    . $file
done
#+end_src

* Applications

** Git

This is how I globally configure git. At this point, this is just a basic configuration that sets my user as well as my signing key. *Note*: I set my editor to emacs. That way, If I ever wanted to commit something from the terminal, emacs opens in a new frame.

#+begin_src conf :tangle (concat (cdr (assoc 'git-config-home file-paths)) "/config") :mkdirp yes
## This file is auto-generated. Do not make changes manually.
## Exported from Desktop.org

[user]
name = Demis Balbach
email = db@minikn.xyz
signingKey = F17DDB98CC3C405C
[core]
editor = emacsclient -c
[commit]
gpgSign = true
[gpg]
program = gpg
#+end_src

** Browsers
*** Chromium

GNU/Guix offers an [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/chromium.scm#n476][ungoogled]] version of the chromium browser which I like to use. However, because I use wayland, I have to explicitly instruct chromium to use it.

#+begin_src scheme :noweb-ref packages
"ungoogled-chromium-wayland"
#+end_src

** GnuPG

I use [[https://gnupg.org/][GnuPG]] to manage my key chain. I also configure it to work well with Emacs. Because I work from within Emacs most of the time I use =pinentry-emacs= to control passphrase prompts. Take a look at my [[Emacs.org][Emacs configuration]] for details.

In my zsh configuration, I set =$GNUPGHOME= to =xdg-data-home/gnupg=. Now I need to set up the GPG agent to work with my setup. Unfortunately, its configuration only accepts hardcoded paths.

#+begin_src sh :noweb-ref env-exports
export GNUPGHOME="${XDG_DATA_HOME}"/gnupg
#+end_src

In order to default to the new =$GNUPGHOME=, we have to define an alias to use.

#+begin_src sh :noweb-ref env-aliases
alias gpg="gpg --homedir ${GNUPGHOME}"
#+end_src

#+begin_src conf :tangle ~/.local/share/gnupg/gpg-agent.conf :mkdirp yes
pinentry-program /home/db/.guix-extra-profiles/desktop/desktop/bin/pinentry-emacs
enable-ssh-support
allow-emacs-pinentry
allow-loopback-pinentry
#+end_src

The GPG agent can also take care of authentication through =ssh=. We just need a =sshcontrol= file in the same place with our authentication keygrip.

#+begin_src conf :tangle ~/.local/share/gnupg/sshcontrol :mkdirp yes
E3FFA5A1B444A4F099E594758008C1D8845EC7C0
#+end_src

In order for this to work, we need a GPG keychain (obviously). I have my keychain saved on a USB drive. Together with the management of my password store, this is the only thing about my setup I do not try to automate. So what I would do at this point is copy my keychain from the USB drive to =$GNUPGHOME=.

#+begin_src scheme :noweb-ref packages
"pinentry-emacs"
"gnupg"
#+end_src

** OpenSSH

Tell SSH to use the gpg-agent for authentication.

#+begin_src sh :noweb-ref env-exports
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
#+end_src

#+begin_src scheme :noweb-ref packages
"openssh"
#+end_src

** Zsh
:PROPERTIES:
:header-args:sh: :tangle (concat (cdr (assoc 'zsh-config-home file-paths)) "/.zshrc") :mkdirp yes
:END:

I use [[https://www.zsh.org/][Zsh]] as my main shell. I have configured my [[System.org][system]] in a way so that =$ZDOTDIR= is automatically set to =xdg-config-home/zsh=. This is the entry for my shell configuration.
By default, =zsh= will look for a =.zshrc= inside =$ZDOTDIR=. Let's do it.

#+begin_src sh
## This file is auto-generated. Do not make changes manually.
## Exported from Desktop.org
#+end_src

#+begin_src scheme :noweb-ref packages
"zsh"
#+end_src

*** Basic settings

This covers the basic settings, like =HISTSIZE=, I configured my =zsh= with. Plugins, like syntax-highlighting have add to the file's tail. They therefore appear last in this chapter.

#+begin_src sh
if [ ! -d "${XDG_DATA_HOME}"/zsh ]; then
    mkdir -p "${XDG_DATA_HOME}"/zsh
fi

HISTFILE="${XDG_DATA_HOME}"/zsh/history
HISTSIZE=1000
SAVEHIST=1000
setopt nomatch
unsetopt beep
bindkey -e

# Add to $fpath so that we can install plugins
fpath=( "${GUIX_EXTRA_PROFILES}/desktop/desktop/share/zsh/site-functions" $fpath )
#+end_src

*** Aliases

This section covers all of my aliases. To some extend, this also includes aliases to applications which offer a =--config= (or similar) parameter for their configuration directory. There is an argument to be made whether one should rather keep this somewhere else (maybe a section of each application with =export=\s and =alias=\es bundled together). However, I decided to split it like this.

**** Navigation helpers

First some handy aliases to navigate the shell.

#+begin_src sh
alias lss="ls --group-directories-first --color=always -laAh"
alias ..="cd .."
alias ...="cd ../../"
alias ....="cd ../../../"
alias cls="printf \"\033c\""
#+end_src

**** Application specific aliases

This is a list containing generic aliases I need. However, each application may define its own aliases using the =env-aliases= reference.

#+begin_src sh :noweb yes
alias dall="d-stp; d-rmc; d-rmv; d-rmi"
alias drmc="docker rm $(docker ps -aq)"
alias drmi="docker rmi $(docker images -q)"
alias drmv="docker volume rm $(docker volume ls -q)"
alias dstp="docker stop $(docker ps -aq)"
alias mbsync="mbsync -c ${XDG_CONFIG_HOME}/isync/mbsyncrc"
alias next="next --session nil"
alias qutebrowser="qutebrowser -R"
<<env-aliases>>
#+end_src

*** Plugins

Zsh has the ability to install plugins quite easily. This section covers all the various plugins I use for my setup.

**** Basic plugins

Some basic plugins like =colors= and =compinit=

#+begin_src sh
zstyle :compinstall filename '${ZDOTDIR}/.zshrc'
autoload -Uz compinit && compinit
autoload -U colors && colors
#+end_src

**** Prompt

This covers my prompt. I recently switched to [[https://github.com/spaceship-prompt/spaceship-prompt][starship]].

#+begin_src sh
autoload -U promptinit; promptinit
prompt spaceship
#+end_src

#+begin_src scheme :noweb-ref packages
"spaceship-prompt"
"font-tamzen"
#+end_src

**** TODO Syntax highlighting

The plugin for syntax highlighting must be sourced at the end of the tangled =.zshrc=. Therefore nothing should follow this plugin. More information can be found [[https://github.com/zsh-users/zsh-syntax-highlighting#why-must-zsh-syntax-highlightingzsh-be-sourced-at-the-end-of-the-zshrc-file][here]].

*Note*: This will not work if the profile =zsh-syntax-highlighting= has been installed with is not called =desktop=. This needs some further tweaking.

#+begin_src sh
if [ -d "${GUIX_EXTRA_PROFILES}"/desktop/desktop/share/zsh-syntax-highlighting ]; then
    . "${GUIX_EXTRA_PROFILES}"/desktop/desktop/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi
#+end_src

#+begin_src scheme :noweb-ref packages
"zsh-syntax-highlighting"
#+end_src

** Sway
:PROPERTIES:
:header-args:conf: :tangle (concat (cdr (assoc 'sway-config-home file-paths)) "/config") :mkdirp yes
:END:

This chapter covers my configuration for [[https://github.com/swaywm/sway][sway]], my window manager.

I need to set the socket sway is using manually, so that I can use =swaymsg= properly.

#+begin_src sh :noweb-ref env-exports
if [ -z ${WAYLAND_DISPLAY} ]; then
    export SWAYSOCK=$(sway --get-socketpath)
fi
#+end_src

This is my sway config.

#+begin_src conf
## This file is auto-generated. Do not make changes manually.
## Exported from Desktop.org
#+end_src

*** General

#+begin_src conf
default_border none
#+end_src

*** Variables

#+begin_src conf
# Logo key. Use Mod1 for Alt
set $mod Mod4

# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l

# Your preferred terminal emulator
set $term run-emacs -c -e "(eshell)"

# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
#set $menu bemenu-run | xargs swaymsg exec --
set $menu run-emacs -e "(app-launcher-run-app)"
#+end_src

*** Outputs

#+begin_src conf
# Outputs
output DP-2 pos 0 0
output HDMI-A-1 pos 2560 0
#+end_src

*** Bindings
**** Basics

#+begin_src conf
# Start a terminal
bindsym $mod+Return exec $term

# Kill focused window
bindsym $mod+Shift+q kill

# Start your launcher
bindsym $mod+d exec $menu

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

# Reload the configuration file
bindsym $mod+Shift+c reload

# Exit sway (logs you out of your Wayland session)
bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
#+end_src

**** Movement

#+begin_src conf
# Move your focus around
bindsym $mod+$left focus left
bindsym $mod+$down focus down
bindsym $mod+$up focus up
bindsym $mod+$right focus right

# Or use $mod+[up|down|left|right]
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Move the focused window with the same, but add Shift
bindsym $mod+Shift+$left move left
bindsym $mod+Shift+$down move down
bindsym $mod+Shift+$up move up
bindsym $mod+Shift+$right move right

# Ditto, with arrow keys
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
#+end_src

**** Workspaces

#+begin_src conf
# Switch to workspace
bindsym $mod+1 workspace number 1
bindsym $mod+2 workspace number 2
bindsym $mod+3 workspace number 3
bindsym $mod+4 workspace number 4
bindsym $mod+5 workspace number 5
bindsym $mod+6 workspace number 6
bindsym $mod+7 workspace number 7
bindsym $mod+8 workspace number 8
bindsym $mod+9 workspace number 9
bindsym $mod+0 workspace number 10

# Move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number 1
bindsym $mod+Shift+2 move container to workspace number 2
bindsym $mod+Shift+3 move container to workspace number 3
bindsym $mod+Shift+4 move container to workspace number 4
bindsym $mod+Shift+5 move container to workspace number 5
bindsym $mod+Shift+6 move container to workspace number 6
bindsym $mod+Shift+7 move container to workspace number 7
bindsym $mod+Shift+8 move container to workspace number 8
bindsym $mod+Shift+9 move container to workspace number 9
bindsym $mod+Shift+0 move container to workspace number 10
#+end_src

**** Layout

#+begin_src conf
# You can "split" the current object of your focus with
# $mod+b or $mod+v, for horizontal and vertical splits
# respectively.
bindsym $mod+b splith
bindsym $mod+v splitv

# Switch the current container between different layout styles
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# Make the current focus fullscreen
bindsym $mod+f fullscreen

# Toggle the current focus between tiling and floating mode
bindsym $mod+Shift+space floating toggle

# Swap focus between the tiling area and the floating area
bindsym $mod+space focus mode_toggle

# Move focus to the parent container
bindsym $mod+a focus parent
#+end_src

**** Scratch pad

#+begin_src conf
# Sway has a "scratchpad", which is a bag of holding for windows.
# You can send windows there and get them back later.

# Move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show
#+end_src

**** Resize

#+begin_src conf
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
#+end_src

*** Bar

#+begin_src conf
bar {
    swaybar_command waybar
}
#+end_src

*** Input

#+Begin_src conf
input * {
    xkb_layout "us"
    xkb_options "ctrl:nocaps"
}
#+end_src

* Local Variables :noexport:
# Local Variables:
# eval: (setq-local file-paths '())
# eval: (map-put file-paths 'xdg-config-home (or (getenv "XDG_CONFIG_HOME") "~/.config"))
# eval: (map-put file-paths 'xdg-data-home (or (getenv "XDG_DATA_HOME") "~/.local/share"))
# eval: (map-put file-paths 'git-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/git"))
# eval: (map-put file-paths 'guix-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/guix"))
# eval: (map-put file-paths 'guix-manifest-home (concat (cdr (assoc 'guix-config-home file-paths)) "/manifests"))
# eval: (map-put file-paths 'sway-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/sway"))
# eval: (map-put file-paths 'zsh-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/zsh"))
# eval: (map-put file-paths 'profiled-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/profile.d"))
# eval: (map-put file-paths 'bindir (concat (cdr (assoc 'xdg-data-home file-paths)) "/bin"))
# eval: (add-hook 'before-save-hook (lambda () (org-babel-ref-resolve "filelist")) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload Desktop profile?") (async-shell-command "update-manifest desktop"))) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle the file?") (org-babel-tangle))) nil t)
# End:
