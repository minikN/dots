#+TITLE: System Configuration
#+AUTHOR: Demis Balbach
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o444)

This file outlines the system configuration of all of my systems. This mainly involves creating Guix system manifest files as well as initializing systems with them.

* Table Of Contents :TOC:
- [[#exported-files][Exported Files]]
- [[#channels][Channels]]
- [[#base-system][Base System]]
- [[#geekcave][Geekcave]]
- [[#wsl][WSL]]
  - [[#installation][Installation]]
  - [[#initialization][Initialization]]
  - [[#updating-the-system][Updating the system]]
  - [[#manifest][Manifest]]
  - [[#gui-applications][GUI Applications]]
  - [[#desktop-icons][Desktop Icons]]

* Exported Files

Tangling this file will create various directories and files in the home directory. However, I don't specify the target file for every source block individually, I rather declare file-local variables containing the target directories (I like [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]]). Because I follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG]] directory specification, I'll use the preferred defaults.
I set all local variables in the [[#Local Variables][Local Variables]] footer of this file (View the raw file in order to see it).

The following tables shows all the defined target directories. All exports are based on these. This table is auto-generated.

#+name: filelist
#+begin_src emacs-lisp :results value :exports results :tangle no
(append
 `(("Variable" "Path") hline)
 (cl-loop for (e) on file-paths collect
          (list (car e)
                (concat "=" (prin1-to-string (cdr e) t) "="))))
#+end_src

#+RESULTS: filelist
| Variable           | Path                                      |
|--------------------+-------------------------------------------|
| guix-manifest-home | =/home/db/.config/guix/manifests/systems= |
| guix-config-home   | =/home/db/.config/guix=                   |
| xdg-config-home    | =/home/db/.config=                        |

I may refer to these directories throughout the configuration, e.g. like that: =guix-config-home/channels.scm=.

* Channels
I use some custom channels for my Guix systems.

#+begin_src scheme :noweb-ref guix-channels :tangle (concat (cdr (assoc 'guix-config-home file-paths)) "/channels.scm") :mkdirp yes
(cons* (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        (introduction
         (make-channel-introduction
          "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
          (openpgp-fingerprint
           "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
       (channel
        (name 'flat)
        (url "https://github.com/flatwhatson/guix-channel.git")
        (introduction
         (make-channel-introduction
          "33f86a4b48205c0dc19d7c036c85393f0766f806"
          (openpgp-fingerprint
           "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
       (channel
        (name 'minikn-guix)
        (url "https://github.com/minikN/minikn-guix.git"))
       %default-channels)
#+end_src

* Base System

This is the base configuration I use for every system I set up.

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/base-system.scm") :mkdirp yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Systems.org

(define-module (base-system)
  #:use-module (gnu)
  #:use-module (gnu packages certs)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages shells)
  #:use-module (gnu services desktop)
  #:use-module (gnu services sddm)
  #:use-module (gnu services xorg)
  #:use-module (srfi srfi-1)
  #:export (base-operating-system
            %base-system-services
            %base-system-packages))

(define %guix-channels
  (scheme-file
   "channels.scm"
   #~
   <<guix-channels>>))

(define %brielmaier-public-key
  (plain-file
   "mirror.brielmaier.net.pub"
   "(public-key
   (ecc
(curve Ed25519)
(q #7514F8D729DB1935470A581CE3851ED9FD6F1F9BAFE1D8BEC77A931ADB7A4337#)
))"))

(define %base-system-services
  (append (list
           (extra-special-file "/etc/guix/channels.scm" %guix-channels)
           (extra-special-file "/usr/bin/env"
                               (file-append coreutils "/bin/env"))
           (simple-service 'zshrc etc-service-type
                           `(("zprofile" ,(plain-file "zprofile" "\
emulate sh -c '. /etc/profile'
emulate sh -c '. $HOME/.config/profile'
emulate sh -c 'export ZDOTDIR=\"$HOME/.config/zsh\"'")))))
          (modify-services %desktop-services
                           (delete gdm-service-type)
                           (guix-service-type config =>
                                              (guix-configuration
                                               (inherit config)
                                               (substitute-urls
                                                (append (list "https://mirror.brielmaier.net")
                                                        %default-substitute-urls))
                                               (authorized-keys
                                                (append (list %brielmaier-public-key)
                                                        %default-authorized-guix-keys)))))))

(define %base-system-packages
  (append (list
           curl
           emacs
           git
           nss-certs
           vim)
          %base-packages))

(define base-operating-system
  (operating-system

   ;; Machine settings
   (host-name "geekcave")
   (timezone "Europe/Berlin")
   (locale "en_US.utf8")
   (keyboard-layout (keyboard-layout "us" "altgr-intl"))

   ;; User account
   (users (cons (user-account
                 (name "db")
                 (group "users")
                 (home-directory "/home/db")
                 (shell (file-append zsh "/bin/zsh"))
                 (supplementary-groups '("wheel"
                                         "audio"
                                         "video"
                                         "input"
                                         "cdrom")))
                %base-user-accounts))

   ;; Services
   (services %base-system-services)

   ;; Boot loader
   (bootloader (bootloader-configuration
                (bootloader grub-efi-bootloader)
                (target "/boot/efi")
                (timeout 3)))

   ;; File systems
   (file-systems (cons* (file-system ;; System partition
                         (device (file-system-label "GUIX"))
                         (mount-point "/")
                         (type "btrfs"))
                        (file-system ;; Boot partition
                         (device (file-system-label "BOOT"))
                         (mount-point "/boot/efi")
                         (type "vfat"))
                        %base-file-systems))

   ;; Packages to install
   (packages %base-system-packages)
   (name-service-switch %mdns-host-lookup-nss)))
base-operating-system
#+end_src

* Geekcave

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/geekcave.scm") :mkdirp yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Systems.org

(define-module (geekcave)
  #:use-module (gnu)
  #:use-module (base-system)
  #:use-module (gnu packages admin)
  #:use-module (gnu packages certs)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages gl)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages video)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages vulkan)
  #:use-module (gnu packages wm)
  #:use-module (gnu services sddm)
  #:use-module (nongnu packages linux)
  #:use-module (nongnu system linux-initrd))

(define %sddm-hidpi
  (plain-file
   "hidpi.conf"
   "[Wayland]
    EnableHiDPI=true"))

(define geekcave-system
  (operating-system
   (inherit base-operating-system)

   (kernel linux-lts)
   (initrd microcode-initrd)
   (firmware (list amdgpu-firmware linux-firmware))

   ;; Kernel arguments
   (kernel-arguments (append
                      '("quiet"
                        "modprobe.blacklist=nouveau"
                        "net.ifnames=0")
                      %default-kernel-arguments))

   ;; Services
   (services (append (list
                      (extra-special-file "/etc/sddm.conf.d/hidpi.conf" %sddm-hidpi)
                      (service sddm-service-type))
                     %base-system-services))

   ;; Packages
   (packages
    (append
     (list sway
           swaybg
           swayidle
           swaylock
           mesa
           ;dxvk
           vkd3d
           mesa-headers
           spirv-cross
           spirv-tools
           mesa-utils
           spirv-headers
           shepherd)
     %base-system-packages))))
geekcave-system
#+end_src

* WSL

This is the configuration for running my Guix setup on the Windows Subsystem for Linux. This will only work if WSL2 is installed and configured [[https://docs.microsoft.com/en-us/windows/wsl/install-win10][properly]].
I based this set up on [[https://gist.github.com/giuliano108/49ec5bd0a9339db98535bc793ceb5ab4][this]] and [[https://gist.github.com/vldn-dev/de379bf81a80ff0a53cd851bcc3bbff2][this]] gist I found online. Running GuixSD as a WSL distribution requires special configuration because it is not offered as a built in distribution on the Windows store.

Tangling this file will create the files necessary to install Guix. To tangle them however, I recommend using a (temporary) WSL distribution like Ubuntu or Debian with Emacs installed. One can then tangle the necessary files with emacs using

#+begin_src sh :tangle no
emacsclient -a '' -e "(org-babel-tangle-file \"/path/to/Systems.org\")"
#+end_src

After that copy all the files that will be created in =~/.config/guix/manifests/systems= to a location where Windows can access them.

First, I need to download the minimal WSL distribution based on =busybox= by [[https://github.com/0xbadfca11/miniwsl][0xbadfca11]]. Download the =rootfs.tgz= of the latest release. If you wish, then you could also [[https://github.com/giuliano108/guix-packages/blob/master/notes/Guix-on-WSL2.md#minimal-rootfs-archive][create]] your own rootfs. Then, open up =PowerShell=, navigate to the folder with the downloaded file and type

#+begin_src sh :tangle no
wsl --import guix /guix rootfs.tgz --version 2
#+end_src

In case a mistake was made, I can run =wsl --unregister guix= and start again.

** Installation

This script is used to install the base GuixSD.

#+begin_src sh :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/guix-wsl-install.sh") :mkdirp yes :noweb yes
#!/bin/sh
## This file is auto-generated. Do not make changes manually.
## Exported from Systems.org

mkdir -p /root /etc/guix /tmp /var/run /run /home
chmod 1777 /tmp
rm /etc/passwd
cat <<EOM >> /etc/passwd
root:x:0:0:root:/root:/bin/bash
guixbuilder01:x:999:999:Guix build user 01:/var/empty:/usr/sbin/nologin
guixbuilder02:x:998:999:Guix build user 02:/var/empty:/usr/sbin/nologin
guixbuilder03:x:997:999:Guix build user 03:/var/empty:/usr/sbin/nologin
guixbuilder04:x:996:999:Guix build user 04:/var/empty:/usr/sbin/nologin
guixbuilder05:x:995:999:Guix build user 05:/var/empty:/usr/sbin/nologin
guixbuilder06:x:994:999:Guix build user 06:/var/empty:/usr/sbin/nologin
guixbuilder07:x:993:999:Guix build user 07:/var/empty:/usr/sbin/nologin
guixbuilder08:x:992:999:Guix build user 08:/var/empty:/usr/sbin/nologin
guixbuilder09:x:991:999:Guix build user 09:/var/empty:/usr/sbin/nologin
guixbuilder10:x:990:999:Guix build user 10:/var/empty:/usr/sbin/nologin
EOM

rm /etc/group
cat <<EOM >> /etc/group
root:x:0:
guixbuild:x:999:guixbuilder01,guixbuilder02,guixbuilder03,guixbuilder04,guixbuilder05,guixbuilder06,guixbuilder07,guixbuilder08,guixbuilder09,guixbuilder10
EOM

cat <<EOM >> /etc/services
ftp-data        20/tcp
ftp             21/tcp
ssh             22/tcp                          # SSH Remote Login Protocol
domain          53/tcp                          # Domain Name Server
domain          53/udp
http            80/tcp          www             # WorldWideWeb HTTP
https           443/tcp                         # http protocol over TLS/SSL
ftps-data       989/tcp                         # FTP over SSL (data)
ftps            990/tcp
http-alt        8080/tcp        webcache        # WWW caching service
http-alt        8080/udp
EOM

cat <<EOM >> /etc/guix/channels.scm
<<guix-channels>>
EOM

cd /tmp
wget http://ftp.gnu.org/gnu/guix/guix-binary-1.3.0.x86_64-linux.tar.xz
tar -C / -xvJf /tmp/guix-binary-1.3.0.x86_64-linux.tar.xz
mkdir -p ~root/.config/guix
ln -sf /var/guix/profiles/per-user/root/current-guix ~root/.config/guix/current
GUIX_PROFILE="`echo ~root`/.config/guix/current"
source $GUIX_PROFILE/etc/profile
guix-daemon --build-users-group=guixbuild &
guix archive --authorize < /var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub

# Edit Path to WSL config!
guix system reconfigure --no-bootloader --no-grafts -L $(dirname $(readlink -f $1)) $1
#+end_src

This can be run like so

#+begin_src sh :tangle no
wsl -d guix /bin/busybox sh -c "/mnt/c/path/to/guix-wsl-install.sh /mnt/c/path/to/wsl.scm"
#+end_src

The paths are relative to =/=, so because the files are located on your host system, they must be preceded with =/mnt/c/=. Let's say the files are located in =C:\Users\<user>\Desktop\guix=, then the path would be =/mnt/c/Users/<user>/Desktop/guix=.

 **Note**: The install script and the manifest file don't have to be in the same folder. The script also sets the load path to the folder containing the manifest file, this means =wsl.scm= may inherit from other modules located in the same load path (like =base-system.scm=!).

** Initialization
After the script has finished. It'll most likely say something like

#+begin_src sh :tangle no
guix system: warning: while talking to shepherd: No such file or directory
#+end_src

This is to be expected. The following script initializes Guix and starts all the necessary services. This usually only needs to be run once per session (after a restart).

#+begin_src sh :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/guix-wsl-init.sh") :mkdirp yes
#!/bin/sh
DIR="/run/current-system"
if [ ! -d "$DIR" ]; then

ln -s none /run/current-system &>/dev/null
export GUIX_NEW_SYSTEM=$(readlink -f /var/guix/profiles/system)
setsid /var/guix/profiles/system/profile/bin/guile  --no-auto-compile  $GUIX_NEW_SYSTEM/boot &>/dev/null &
sleep 1
fi

export GUIX_PROFILE=/run/current-system
source "$GUIX_PROFILE/etc/profile"

for f in ping su sudo; do
        chmod 4755 $(readlink -f $(which $f))
done
#+end_src

Run the script like so:

#+begin_src sh :tangle no
wsl -d guix /bin/busybox sh -c "/mnt/c/path/to/guix-wsl-init.sh"
#+end_src

The command doesn't produce any output. One may now log into the distribution by running =wsl -d guix=. Once logged in, set some passwords.

#+begin_src sh :tangle no
passwd
passwd db
#+end_src

After that's done. =exit= the distribution and try starting it again with

#+begin_src sh :tangle no
wsl -u db -d guix
#+end_src

For every subsequent start use the same command.

** Updating the system
Updating the system is done the regular way using

#+begin_src sh :tangle no
guix pull
sudo guix system reconfigure /mnt/c/path/to/wsl.scm
#+end_src

** Manifest

To make all of this work, I use the following manifest file inheriting from =base-system=:

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/wsl.scm") :mkdirp yes
(define-module (wsl)
  #:use-module (base-system)
  #:use-module (gnu)
  #:use-module (gnu services ssh)
  #:use-module (gnu services networking)
  #:use-module (gnu packages version-control)
  #:use-module (guix channels)
  #:use-module (guix packages)
  #:use-module (guix profiles)
  #:use-module (ice-9 pretty-print)
  #:use-module (srfi srfi-1))

(define-public wsl-operating-system
  (operating-system
   (inherit base-operating-system)
   (host-name "guix")

   (kernel hello)
   (initrd (lambda* (. rest) (plain-file "dummyinitrd" "dummyinitrd")))
   (initrd-modules '())
   (firmware '())

   (bootloader
    (bootloader-configuration
     (bootloader
      (bootloader
       (name 'dummybootloader)
       (package hello)
       (configuration-file "/dev/null")
         (configuration-file-generator (lambda* (. rest) (computed-file "dummybootloader" #~(mkdir #$output))))
       (installer #~(const #t))))))

   (file-systems (list (file-system
                        (device "/dev/sdb")
                        (mount-point "/")
                        (type "ext4")
                        (mount? #t))))))
wsl-operating-system
#+end_src

** GUI Applications

In order to run GUI applications, the =DISPLAY= variable and some other stuff needs to be set properly. For that reason, I tangle a wrapper script in my [[file:Desktop.org#Scripts][Desktop configuration]].
See the next section for information on how to use it.

** Desktop Icons

In order to start individual applications from desktop shortcuts, we need a launcher. I create a file called =launcher.vbs= somewhere on my host where I can access it with the following content (edit the user and path to script):

#+begin_src vbs :tangle no
WScript.CreateObject("WScript.Shell").Run "wsl ~ -u db -d guix /home/db/.local/share/bin/run-wsl " & WScript.Arguments(0), 0, false
#+end_src

Then I can create a new shortcut on my desktop to that file. After that I right click on it an select =Properties=. In the =target= field I append the name of the application I want to execute, =emacs= for example. Like this: =C:\Users\deb\Desktop\launcher.vbs emacs=. I can even assign a dedicated icon if I wanted to.

* Local Variables :noexport:
# Local Variables:
# eval: (setq-local file-paths '())
# eval: (map-put file-paths 'xdg-config-home (or (getenv "XDG_CONFIG_HOME") "~/.config"))
# eval: (map-put file-paths 'guix-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/guix"))
# eval: (map-put file-paths 'guix-manifest-home (concat (cdr (assoc 'guix-config-home file-paths)) "/manifests/systems"))
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle the file?") (org-babel-tangle))) nil t)
# End:
