#+TITLE: Games Configuration
#+SUBTITLE: If I Had The Time
#+AUTHOR: Demis Balbach
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o444)

This file contains the configuration for my games. You are reading a [[https://leanpub.com/lit-config/read][literate]] configuration, meaning this file not only documents my configuration, it /is/ my configuration. It will tangle all of my configuration- or dotfiles on every save.

* Table Of Contents :TOC:
- [[#exported-files][Exported Files]]
  - [[#guix-profiles][Guix Profiles]]
- [[#required-libraries][Required Libraries]]
- [[#steam][Steam]]

* Exported Files
Tangling this file will create various directories and files in the home directory. However, I don't specify the target file for every source block individually, I rather declare file-local variables containing the target directories (I like [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]]). Because I follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG]] directory specification, I'll use the preferred defaults.
I set all local variables in the [[#Local Variables][Local Variables]] footer of this file (View the raw file in order to see it).

The following tables shows all the defined directories for this file. All exports are based on these. This table is auto-generated.

#+name: filelist
#+begin_src emacs-lisp :results value :exports results :tangle no
(append
 `(("Variable" "Path") hline)
 (cl-loop for (e) on file-paths collect
          (list (car e)
                (concat "=" (prin1-to-string (cdr e) t) "="))))
#+end_src

#+RESULTS: filelist
| Variable           | Path                              |
|--------------------+-----------------------------------|
| bindir             | =/home/db/.local/share/bin=       |
| guix-manifest-home | =/home/db/.config/guix/manifests= |
| guix-config-home   | =/home/db/.config/guix=           |
| git-config-home    | =/home/db/.config/git=            |
| xdg-data-home      | =/home/db/.local/share=           |
| xdg-config-home    | =/home/db/.config=                |

I may refer to these directories throughout the configuration, e.g. like that: =guix-config-home/channels.scm=.

** Guix Profiles
The following Guix profiles will be created.

| Type         | Content                              |
|--------------+--------------------------------------|
| Guix Profile | =guix-manifest-home/games.scm=       |

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/games.scm") :noweb yes :mkdir yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Emacs.org

(specifications->manifest
 '(
   <<packages>>
   ))
#+end_src

* Required Libraries

There are a couple of libraries that are required to run things like Proton, especially GloriousEggroll's [[https://www.gloriouseggroll.tv/how-to-get-out-of-wine-dependency-hell/][Proton Custom]] successfully.

| Type    | Content                                                                                                                                                                                                                        |
|---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Note    | One could argue these packages should be installed in my [[file:Systems.org][System]] configuration. However I opted to only install my GPU drivers (that's the mesa packages) system wide and everything else that is needed for gaming right here. |
| Package | =spirv-cross=                                                                                                                                                                                                                  |
| Package | =spirv-headers=                                                                                                                                                                                                                |
| Package | =spirv-tools=                                                                                                                                                                                                                  |
| Package | =vkd3d=                                                                                                                                                                                                                        |
| Package | =dvxk=                                                                                                                                                                                                                         |
| Package | =wine=                                                                                                                                                                                                                         |
| Package | =wine-staging=                                                                                                                                                                                                                 |
| Package | =winetricks=                                                                                                                                                                                                                   |
| Package | =vulkan-loader=                                                                                                                                                                                                                |
| Package | =vulkan-tools=                                                                                                                                                                                                                 |
| Package | =vulkan-headers=                                                                                                                                                                                                               |

#+begin_src scheme :noweb-ref packages :exports no
"spirv-cross"
"spirv-headers"
"spirv-tools"
"vkd3d"
"dxvk"
"wine"
"wine-staging"
"winetricks"
"vulkan-loader"
"vulkan-tools"
"vulkan-headers"
#+end_src

* Steam

On Guix, Steam runs in its own sandbox. This means, that Steam itself is unable to see any directories outside that sandbox. By default, the sandbox will be created in =xdg-data-home/guix-sandbox-home=. However I want the sandbox to reside on an external SSD, namely =/mnt/games=.
For this to work I need to copy the Guix wrapper that starts Steam and change the default path for the sandbox.

#+begin_src scheme :tangle (concat (cdr (assoc 'bindir file-paths)) "/steam-wrapper") :tangle-mode (identity #o755)
#!/run/current-system/profile/bin/guile --no-auto-compile
!#
(eval-when (expand load eval) (let ((extensions (quote ())) (prepend (lambda (items lst) (let loop ((items items) (lst lst)) (if (null? items) lst (loop (cdr items) (cons (car items) (delete (car items) lst)))))))) (set! %load-path (prepend (cons "/gnu/store/xv5ylv9hxvs1wraw375b5g9jwy57vs8p-module-import" (map (lambda (extension) (string-append extension "/share/guile/site/" (effective-version))) extensions)) %load-path)) (set! %load-compiled-path (prepend (cons "/gnu/store/2x6qsyiyni2j39dgjf5pxk36hqv23qn9-module-import-compiled" (map (lambda (extension) (string-append extension "/lib/guile/" (effective-version) "/site-ccache")) extensions)) %load-compiled-path))))(begin (use-modules (guix build utils)) (define (preserve-var var) (string-append "--preserve=" var)) (define* (add-path path #:key writable?) (let ((opt (if writable? "--share=" "--expose="))) (if (pair? path) (string-append opt (car path) "=" (cdr path)) (string-append opt path)))) (define (exists-> file) (if (and file (file-exists? file)) (quasiquote ((unquote file))) (quote ()))) (let* ((run "/gnu/store/kcn8g7g07avixa6f446v792ff0pydb68-fhs-internal-1.0.0.61/bin/fhs-internal") (manifest-file "/gnu/store/bvsqc9qvyb3xgpqr8f36wa56253mcpjw-nonguix-container-manifest.scm") (xdg-runtime (getenv "XDG_RUNTIME_DIR")) (home (getenv "HOME")) (sandbox-home "/mnt/games/steam-sandbox") (preserved-env (quote ("^DBUS_" "^DISPLAY$" "^DRI_PRIME$" "_PROXY$" "_proxy$" "^SDL_" "^STEAM_" "^XAUTHORITY$" "^XDG_DATA_HOME$" "^XDG_RUNTIME_DIR$"))) (expose (quasiquote ("/dev/dri" "/dev/input" (unquote-splicing (exists-> "/etc/machine-id")) "/sys/class/input" "/sys/dev" (unquote-splicing (exists-> "/dev/nvidia0")) (unquote-splicing (exists-> "/dev/nvidiactl")) (unquote-splicing (exists-> "/dev/nvidia-modeset")) "/sys/devices" (unquote-splicing (exists-> "/var/run/dbus"))))) (share (quasiquote ("/dev/shm" (unquote (string-append sandbox-home "=" home)) (unquote-splicing (exists-> (string-append home "/.config/pulse"))) (unquote-splicing (exists-> (string-append xdg-runtime "/pulse"))) (unquote-splicing (exists-> (string-append xdg-runtime "/bus"))) (unquote-splicing (exists-> (getenv "XAUTHORITY")))))) (DEBUG (equal? (getenv "DEBUG") "1")) (args (cdr (command-line))) (command (if DEBUG (quote ()) (quasiquote ("--" (unquote run) (unquote-splicing args)))))) (format #t "\n* Launching ~a in sandbox: ~a.\n\n" "steam-client" sandbox-home) (when DEBUG (format #t "* DEBUG set to 1: Starting shell. Launch application manually with: ~a.\n\n" "fhs-internal")) (mkdir-p sandbox-home) (invoke "/gnu/store/z4p6v7fs5q18wn21rf9zdyxpm3858xly-pulseaudio-14.0/bin/pulseaudio" "--start" "--exit-idle-time=60") (apply invoke (quasiquote ("guix" "environment" "--ad-hoc" "--container" "--no-cwd" "--network" (unquote-splicing (map preserve-var preserved-env)) (unquote-splicing (map add-path expose)) (unquote-splicing (map (lambda (item) (add-path item #:writable? #t)) share)) "-m" (unquote manifest-file) (unquote-splicing command))))))

#+end_src

#+end_src
| Type    | Content |
|---------+---------|
| Package | =steam= |

#+begin_src scheme :noweb-ref packages :exports no
"steam"
#+end_src

* Local Variables :noexport:
# Local Variables:
# eval: (setq-local file-paths '())
# eval: (map-put file-paths 'xdg-config-home (or (getenv "XDG_CONFIG_HOME") "~/.config"))
# eval: (map-put file-paths 'xdg-data-home (or (getenv "XDG_DATA_HOME") "~/.local/share"))
# eval: (map-put file-paths 'git-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/git"))
# eval: (map-put file-paths 'guix-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/guix"))
# eval: (map-put file-paths 'guix-manifest-home (concat (cdr (assoc 'guix-config-home file-paths)) "/manifests"))
# eval: (map-put file-paths 'bindir (concat (cdr (assoc 'xdg-data-home file-paths)) "/bin"))
# eval: (add-hook 'before-save-hook (lambda () (org-babel-ref-resolve "filelist")) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload Games profile?") (async-shell-command "update-manifest games"))) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle the file?") (org-babel-tangle))) nil t)
# End:
