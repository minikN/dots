#+TITLE: Games Configuration
#+SUBTITLE: If I Had The Time
#+AUTHOR: Demis Balbach
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o444)

This file contains the configuration for my games. You are reading a [[https://leanpub.com/lit-config/read][literate]] configuration, meaning this file not only documents my configuration, it /is/ my configuration. It will tangle all of my configuration- or dotfiles on every save.

* Table Of Contents :TOC:
- [[#exported-files][Exported Files]]
  - [[#guix-profiles][Guix Profiles]]

* Exported Files
Tangling this file will create various directories and files in the home directory. However, I don't specify the target file for every source block individually, I rather declare file-local variables containing the target directories (I like [[https://en.wikipedia.org/wiki/Don%27t_repeat_yourself][DRY]]). Because I follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG]] directory specification, I'll use the preferred defaults.
I set all local variables in the [[#Local Variables][Local Variables]] footer of this file (View the raw file in order to see it).

The following tables shows all the defined directories for this file. All exports are based on these. This table is auto-generated.

#+name: filelist
#+begin_src emacs-lisp :results value :exports results :tangle no
(append
 `(("Variable" "Path") hline)
 (cl-loop for (e) on file-paths collect
          (list (car e)
                (concat "=" (prin1-to-string (cdr e) t) "="))))
#+end_src

#+RESULTS: filelist
| Variable           | Path                              |
|--------------------+-----------------------------------|
| bindir             | =/home/db/.local/share/bin=       |
| guix-manifest-home | =/home/db/.config/guix/manifests= |
| guix-config-home   | =/home/db/.config/guix=           |
| git-config-home    | =/home/db/.config/git=            |
| xdg-data-home      | =/home/db/.local/share=           |
| xdg-config-home    | =/home/db/.config=                |

I may refer to these directories throughout the configuration, e.g. like that: =guix-config-home/channels.scm=.

** Guix Profiles
The following Guix profiles will be created.

| Type         | Content                              |
|--------------+--------------------------------------|
| Guix Profile | =guix-manifest-home/games.scm=       |

#+begin_src scheme :tangle (concat (cdr (assoc 'guix-manifest-home file-paths)) "/games.scm") :noweb yes :mkdir yes
;; This file is auto-generated. Do not make changes manually.
;; Exported from Emacs.org

(specifications->manifest
 '(
   <<packages>>
   ))
#+end_src

* Local Variables :noexport:
# Local Variables:
# eval: (setq-local file-paths '())
# eval: (map-put file-paths 'xdg-config-home (or (getenv "XDG_CONFIG_HOME") "~/.config"))
# eval: (map-put file-paths 'xdg-data-home (or (getenv "XDG_DATA_HOME") "~/.local/share"))
# eval: (map-put file-paths 'git-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/git"))
# eval: (map-put file-paths 'guix-config-home (concat (cdr (assoc 'xdg-config-home file-paths)) "/guix"))
# eval: (map-put file-paths 'guix-manifest-home (concat (cdr (assoc 'guix-config-home file-paths)) "/manifests"))
# eval: (map-put file-paths 'bindir (concat (cdr (assoc 'xdg-data-home file-paths)) "/bin"))
# eval: (add-hook 'before-save-hook (lambda () (org-babel-ref-resolve "filelist")) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload Games profile?") (async-shell-command "update-manifest games"))) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle the file?") (org-babel-tangle))) nil t)
# End:
